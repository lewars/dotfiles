;;; .emacs --- Emacs initialization file -*- mode: emacs-lisp; lexical-binding: t; -*-

;; Copyright (C) 1996-2024 Alistair Y. Lewars

;; Author: Alistair Y. Lewars

;;; Commentary:
;;
;; Created with ❤️

;;; Code:

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(when (string-equal system-type "gnu/linux")
  (defvar ispell-program-name "aspell"))

(defun monitor-name-is-eDP-1 ()
  "Return t if any monitor is named 'eDP-1'."
  (seq-some (lambda (monitor)
              (equal (cdr (assoc 'name monitor)) "eDP-1"))
            (display-monitor-attributes-list)))
(defun le/first-monitor-larger-than-3840x2400 ()
  "Check if the first monitor's geometry has a resolution greater than 3840x2400."
  (let* ((monitor-attrs (car (display-monitor-attributes-list)))
         (geometry (cdr (assoc 'geometry monitor-attrs)))
         (width (nth 2 geometry))
         (height (nth 3 geometry)))
    (and (> width 3840) (> height 2400))))


;; Global settings
(setq fill-column 120)
(setq tab-bar-show nil)


;; A few more useful configurations...
(use-package emacs
  :init
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Set window size
  (setq default-frame-alist
      '((width . 209)
        (height . 79))))

;; Handle large file
;; Enable so-long mode globally (built into Emacs 27+)
;; (global-so-long-mode 1)

(defun le/setup-large-file-handling-high-mem ()
  "Configure settings for better large file handling in Emacs on
 systems with large RAM."

  (setq-default
   ;; Increase read-process-output-max to 8MB for better performance
   read-process-output-max (* 8 1024 1024)

   ;; 1GB
   gc-cons-threshold (* 10 1024 1024 )

   ;; Increase large-file-warning-threshold to 100MB
   large-file-warning-threshold (* 100 1024 1024 )

   ;; Increase undo limits
   undo-limit (* 4 1024 1024)
   undo-strong-limit (* 6 1024 1024)
   undo-outer-limit (* 12 1024 1024)

   read-process-output-max (* 16 1024 1024)) ; 16MB


   ;; Configure literal mode for very large files
   ;; (setq-default literal-mode-threshold (* 1 1024 1024))

   ;; Settings for vlf (Very Large Files) mode
   (use-package vlf
     :ensure t
     :config
     (require 'vlf-setup)
     (setq vlf-batch-size (* 16 1024 1024)))

   ;; Configure file-name-handler-alist to ignore certain operations
   (let ((file-name-handler-alist nil)))

   (defun le/disable-undo-in-large-buffers ()
     "Disable undo only for extremely large buffers"
     (when (> (buffer-size) (* 500 1024 1024)) ; 500MB
       (buffer-disable-undo)))
   (add-hook 'find-file-hook 'le/disable-undo-in-large-buffers)

   (defun le/disable-minor-modes-for-large-files ()
     "Disable various minor modes for large files"
     (when (> (buffer-size) (* 100 1024 1024)) ; 100MB
       (font-lock-mode -1)
       (line-number-mode -1)
       (flycheck-mode -1)
       (linum-mode -1)
       (company-quickhelp-mode -1)
       (company-quickhelp-local-mode -1)
       (emojify-mode -1)
       (company-mode -1)
       (company-box -1)
       (company-qickhelp-mode -1)
       (company-qickhelp-local-mode -1)
       (global-emojify-mode -1)
       (global-font-lock-mode -1)
       (global-git-commit-mode -1)
       (global-org-modern-mode -1)
       (line-number-mode -1)
       (show-paren-mode -1)
       (tooltip-mode -1)
       (transient-mark-mode -1)
       (column-number-mode -1)
       (display-line-numbers-mode -1)))
   (add-hook 'find-file-hook 'le/disable-minor-modes-for-large-files)

   ;; Enable jit-lock-stealth-time for background fontification
   (setq jit-lock-stealth-time 1)
   (setq jit-lock-stealth-nice 0.5)
   (setq jit-lock-chunk-size 100000)

   ;; Increase read buffer size
   (setq read-buffer-size (* 8 1024 1024)))

;; Initialize the configuration
(le/setup-large-file-handling-high-mem)

;; Additional settings for specific file types
(add-to-list 'auto-mode-alist '("\\.log\\'" . fundamental-mode))
(add-to-list 'auto-mode-alist '("\\.sql\\'" . fundamental-mode))
(add-to-list 'auto-mode-alist '("\\.odt\\'" . docview-mode))

;; prog-mode settings and hooks
(defun le/my-prog-mode-settings ()
  (display-line-numbers-mode)
  ;; (hl-line-mode)
  ;; (hs-minor-mode)
  (outline-minor-mode)
  (setq auto-fill-mode 0)
  (setq toggle-word-wrap 1)
  (setq fill-column 160)
  (setq display-fill-column-indicator 1)
  (setq display-fill-column-indicator-column 80)
  (setq indent-tabs-mode nil)
  (setq tab-width 4)
  (setq show-trailing-whitespace t)
  (setq whitespace-style '(face
                         tabs spaces trailing lines space-before-tab newline
                         indentation empty space-after-tab
                         space-mark tab-mark
                         missing-newline-at-eof))
  (local-set-key (kbd "C-c C-c") 'compile))

(add-hook 'prog-mode-hook 'le/my-prog-mode-settings)
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode t)

;; text-mode settings and hooks
(defun le/my-text-mode-settings ()
  (setq-local show-trailing-whitespace nil)
  (visual-line-mode)
  (setq fill-column 220)
  (setq sentence-end-double-space nil)
  (flyspell-mode)
  (setq show-trailing-whitespace t)
  (setq whitespace-style '(face
                         tabs spaces trailing lines space-before-tab newline
                         indentation empty space-after-tab
                         space-mark tab-mark
                         missing-newline-at-eof))
  (local-set-key (kbd "C-c C-w") 'count-words))

(add-hook 'text-mode-hook 'le/my-text-mode-settings)

(setq ispell-dictionary "english")
(setq ispell-silently-savep t)
(setq ispell-personal-dictionary (expand-file-name "~/.ispell_english"))

(if (string-equal system-type "gnu/linux")
    (if (monitor-name-is-eDP-1)
        (setq my-default-font-height 150)
      (setq my-default-font-height 100))
    (setq my-default-font-height 125))

;; Set fonts
(set-face-attribute 'default nil
                    :height my-default-font-height
                    :foundry "ADBO"
                    :family "Source Code Pro")

(set-face-attribute 'variable-pitch nil
                    :family "Open Sans"
                    :height 1.40)

(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ))

(setq package-archive-priorities
      '(("gnu" . 30)
        ("melpa-stable" . 20)
        ("melpa" . 40)))

(package-initialize)

(require 'use-package)
(require 'quelpa-use-package)

;; Misc configs
(delete-selection-mode 1)
(require 'recentf)
(recentf-mode t)
(setq recentf-max-menu-items 50)
(setq recentf-max-saved-items 50)
(run-at-time nil (* 5 60) 'recentf-save-list)

;; todo: fix this
;; (global-set-key "\C-x\ \C-r" 'fzf-recentf)
(global-set-key "\C-x\ \C-r" 'recentf-open)
(global-set-key "\C-x\ \C-y" 'find-file-read-only)

(setq-default indent-tabs-mode nil)

(setq explicit-shell-file-name "/bin/bash")
(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

;; Only vailable in emacs 29.1
(setq auto-save-visited-predicate
      (lambda () (eq major-mode 'org-mode)
        auto-save-visited-interval 5))

(defun le/my-c-mode-hook ()
  "This hook define hooks for 'c-mode'."
  (setq indent-tabs-mode nil))

(add-hook 'c-mode-hook 'le/my-c-mode-hook)
(set-scroll-bar-mode nil)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq use-dialog-box nil)

(defun le/run-command-on-save (command)
  "Run a specified COMMAND every time the current buffer is saved."
  (interactive "sEnter command to run on save: ")
  (add-hook 'after-save-hook
            (lambda ()
              (shell-command command))
            nil t))

;; Start emacs server
(if (display-graphic-p)
    '(server-mode t))
(require 'server)
(unless (server-running-p)
  (server-start))

(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
(global-set-key (read-kbd-macro "M-S-<left>") 'windmove-swap-states-left)
(global-set-key (read-kbd-macro "M-S-<right>") 'windmove-swap-states-right)
(global-set-key (read-kbd-macro "M-S-<up>") 'windmove-swap-states-up)
(global-set-key (read-kbd-macro "M-S-<down>") 'windmove-swap-states-down)
(global-set-key (read-kbd-macro "C-x f") 'find-file-at-point)

;; Setup keybinding for eww
(defun le/my-eww-config ()
    "For use in `eww-mode-hook'."
    (local-set-key (kbd "^") #'eww-back-url))

(when (fboundp 'eww-mode)
  (add-hook 'eww-mode-hook 'le/my-eww-config))

(setq inhibit-startup-screen t)
(setq display-time-day-and-date t)
(display-time-mode t)

(setq mouse-wheel-scroll-amount '(0.01))
(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
(setq completion-cycle-threshold t)

;; Web search Jamaica
(defun le/search-web (text)
  "Search the web for TEXT using your default browser."
  (interactive
   (list (if (use-region-p)
             (buffer-substring (region-beginning) (region-end))
           (thing-at-point 'word t))))
  (browse-url
   (concat "https://www.google.com/search?q="
           (url-encode-url text))))

;; Bind it to a key of your choice, for example C-c s
(global-set-key (kbd "C-c s") 'le/search-web)

(use-package help
  :bind
  (:map help-mode-map
        ("^" . help-go-back)))

(use-package whitespace
  :ensure nil
  :bind
  ("C-c w" . whitespace-mode)
  ("C-c k" . whitespace-cleanup)
  :config
  (setq whitespace-style '(face
                           tabs spaces trailing lines space-before-tab newline
                           indentation empty space-after-tab
                           space-mark tab-mark
                           missing-newline-at-eof)))

(use-package whitespace-cleanup-mode
  :ensure t
  :init (setq whitespace-cleanup-mode-ignore-modes '(special-mode))
  :hook ((prog-mode . whitespace-cleanup-mode)
         (org-mode . whitespace-cleanup-mode)))

(use-package paren
  :ensure nil
  :init
  (setq show-paren-delay 1)
  (setq show-paren-style 'mixed)
  :config
  (show-paren-mode 1))


(use-package eldoc
  :ensure nil
  :diminish
  :hook
  ((emacs-lisp-mode . eldoc-mode)
   (lisp-interaction-mode . eldoc-mode)
   (ielm-mode . eldoc-mode))
  :config
  (setq eldoc-idle-delay 0)
  (setq eldoc-echo-area-use-multiline-p t))

;; (use-package elisp-eldoc
;;   :ensure nil
;;   :hook (emacs-lisp-mode . elisp-eldoc-enable))

;; (use-package eldoc-box
;;   :ensure t
;;   :hook (emacs-lisp-mode . eldoc-box-hover-at-point-mode)
;;   :config
;;   (setq eldoc-box-clear-with-C-g t))

(use-package electric
  :ensure nil
  :init
  (electric-pair-mode 1)
  :config
  (setq electric-pair-preserve-balance t
        electric-pair-delete-adjacent-pairs t
        electric-pair-open-newline-between-pairs nil))

(use-package yasnippet
  :ensure t
  :init
  (setq yas-snippet-dirs '("~/git/yasnippet-snippets/snippets"
                           "~/.emacs.d/snippets"
                           )
        yas-wrap-around-region t
        yas-triggers-in-field t
        yas/triggers-in-field t)
  :bind
  ("M-/" . hippie-expand)
  :config
  (yas-global-mode 1)
  (yas-reload-all)
  (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand))

(use-package consult-yasnippet
  :ensure t)

(setq display-buffer-alist
      '(
        ("\\*\\(term\\|vterm\\|[eE]?shell\\)\\*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (slot . -1))
        ("\\*\\([Hh]elp.*\\|[Ii]nfo\\|.*[Ff]inder.*\\|Apropos\\)\\*"
         ;; todo - have matched buffers use the same window
         (display-buffer-reuse-window
          display-buffer-in-direction)
         (mode . '(help-mode Info-mode))
         (window . root)
         (direction . right)
         (window-width . 0.48))
        ("\\*\\(ChatGPT\\|Ollama\\)\\*"
         (display-buffer-reuse-window
          display-buffer-in-direction)
         (mode . '(help-mode Info-mode))
         (window . root)
         (direction . right)
         (window-width . 0.48))
        ("\\*\\(Flycheck errors\\|python-black errors\\|Backtrace\\)\\*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (slot . 0))
        ("\\*Org todo\\*"
         (display-buffer-at-bottom)
         (window-height . 0.3))
        ))

(defun le/my-find-file-symlink-target ()
  "Follow symlinks for specific files, avoiding the VC prompt."
  (let ((filename (file-name-nondirectory (buffer-file-name))))
    (when (or (equal filename ".emacs")
              (equal filename ".bashrc"))
      (setq vc-follow-symlinks t))))

(add-hook 'find-file-hook 'le/my-find-file-symlink-target)

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

;; Tramp configuration
(customize-set-variable 'tramp-use-ssh-controlmaster-options 'suppress)
(customize-set-variable 'tramp-default-method "ssh")
;; (customize-set-variable 'tramp-verbose 6 "Enable remote command traces")

;; Setup Dired Git integration
(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))

;; (use-package dired-git
;;   :ensure t
;;   :hook (dired-mode . dired-git-mode))

;; Setup dired-single
(use-package dired-single
  :ensure t)

(require 'dired-single)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-matching-paren t)
 '(column-number-mode 1)
 '(custom-safe-themes
   '("f64189544da6f16bab285747d04a92bd57c7e7813d8c24c30f382f087d460a33" "443e2c3c4dd44510f0ea8247b438e834188dc1c6fb80785d83ad3628eadf9294" "adaf421037f4ae6725aa9f5654a2ed49e2cd2765f71e19a7d26a454491b486eb" "60ada0ff6b91687f1a04cc17ad04119e59a7542644c7c59fc135909499400ab8" "0c08a5c3c2a72e3ca806a29302ef942335292a80c2934c1123e8c732bb2ddd77" "ce4234c32262924c1d2f43e6b61312634938777071f1129c7cde3ebd4a3028da" "b54376ec363568656d54578d28b95382854f62b74c32077821fdfd604268616a" "1aa4243143f6c9f2a51ff173221f4fd23a1719f4194df6cef8878e75d349613d" "eca44f32ae038d7a50ce9c00693b8986f4ab625d5f2b4485e20f22c47f2634ae" "6945dadc749ac5cbd47012cad836f92aea9ebec9f504d32fe89a956260773ca4" "636b135e4b7c86ac41375da39ade929e2bd6439de8901f53f88fde7dd5ac3561" "2721b06afaf1769ef63f942bf3e977f208f517b187f2526f0e57c1bd4a000350" default))
 '(frame-background-mode nil)
 '(ignored-local-variable-values
   '((eval progn
           (message "Loading .dir-locals.el for tally")
           (setq-local projectile-project-name "tally")
           (setq-local projectile-project-root "~/git/tally")
           (setq-local python-shell-virtualenv-root ".venv")
           (setq-local projectile-project-install-cmd "go-task setup")
           (setq projectile-install-cmd "go-task setup")
           (setq-local projectile-project-test-cmd "go-task check-all")
           (setq projectile-test-cmd "go-task check-all")
           (setq-local projectile-project-run-cmd "go-task run")
           (setq projectile-run-cmd "go-task run")
           (setq-local projectile-project-package-cmd "go-task docker-clean docker-build")
           (setq projectile-package-cmd "go-task docker-clean docker-build")
           (setq-local projectile-project-test-suffix "_test")
           (setq-local projectile-project-test-prefix "test_")
           (setq-local projectile-project-src-dir "app")
           (setq-local projectile-project-test-dir "tests"))))
 '(imenu-auto-rescan t)
 '(magit-bury-buffer-function 'magit-restore-window-configuration)
 '(org-agenda-files '("~/git/org/todo/gtd.org"))
 '(package-selected-packages
   '(google-this eldoc-box elisp-docstring-mode lsp-pyright whitespace-cleanup-mode consult-gh-forge consult-gh consult-org-roam org-roam-ui org-roam djvu nov latex-preview-pane flyspell-correct lorem-ipsum buttercup org-download systemd auctex-latexmk py-isort blacken vertico-posframe vertico treemacs-all-the-icons treemacs-nerd-icons consult consult-lsp vterm eterm-256color atomic-chrome company-box quelpa-use-package quelpa json-rpc editorconfig fzf corfu orderless all-the-icons-dired projectile-ripgrep k8s-mode dockerfile-mode edit-server bats-mode helpful emojify which-key dashboard lsp-ui marginalia multi-term gnu-elpa-keyring-update auth-source-1password helm npm-mode xterm-color ibuffer-projectile consult-git-log-grep consult-ls-git consult-dir * consult-flycheck consult-projectile consult-yasnippet bats dired-git-mode async diminish dired-git dashboard-project-status dashboard-hackernews dashboard-ls nerd-icons-corfu tree-sitter ansible-vault ansible-doc ansible yasnippet-snippets bazel color-theme direx flycheck-posframe flycheck-grammarly json-navigator json-mode pyenv-mode imenu-anywhere windresize treemacs-persp treemacs-magit treemacs-icons-dired terraform-doc jedi iedit icomplete-vertical helm-gtags go-mode git-modes ghub flyspell-correct-helm flymd flymake-yamllint flymake-shell flymake-python-pyflakes flymake-json flymake-gradle flymake-golangci flymake-go-staticcheck flymake-go flycheck-yamllint flycheck-color-mode-line flycheck-aspell find-file-in-project copilot))
 '(warning-suppress-types '((lsp-mode) (comp)))
 '(window-divider-default-right-width 2)
 '(window-divider-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-bright-black ((t (:background "#222D32" :foreground "dark gray"))))
 '(bold ((t (:weight extra-bold))))
 '(copilot-overlay-face ((t (:foreground "pale violet red"))))
 '(cursor ((t (:background "#c792ea"))))
 '(custom-comment ((t (:background "#171F24" :foreground "#EEFFFF"))))
 '(custom-comment-tag ((t (:foreground "dark gray"))))
 '(doom-themes-treemacs-root-face ((t (:inherit font-lock-string-face :height 0.85))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "light gray"))))
 '(font-lock-comment-face ((t (:foreground "gray"))))
 '(font-lock-doc-face ((t (:inherit font-lock-comment-face :foreground "gray"))))
 '(fringe ((t (:inherit default :foreground "medium aquamarine"))))
 '(highlight ((t (:background "#c792ea" :foreground "#7d7c8a"))))
 '(highlight-symbol-face ((t (:background "#5a5400"))))
 '(ido-only-match ((t (:foreground "SpringGreen3"))))
 '(line-number ((t (:foreground "gray"))))
 '(line-number-current-line ((t (:foreground "white"))))
 '(mode-line ((t (:background "#093159" :foreground "#dde4eb" :box nil))))
 '(mode-line-inactive ((t (:background "#394c55" :foreground "#a4aeba" :box nil))))
 '(nerd-icons-orange ((t (:foreground "steel blue"))))
 '(org-agenda-dimmed-todo-face ((t (:foreground "dark gray"))))
 '(org-block ((t (:inherit fixed-pitch :height 0.9))))
 '(org-block-begin-line ((t (:inherit org-block :extend t :background "#222D32" :foreground "SlateGray4" :weight light :height 0.9))))
 '(org-block-end-line ((t (:inherit org-block-begin-line))))
 '(org-code ((t (:inherit fixed-pitch))))
 '(org-document-info ((t (:height 1.0))))
 '(org-document-info-keyword ((t (:foreground "SlateGray4" :weight light :height 0.96))))
 '(org-document-title ((t (:foreground "#82aaff" :weight bold :height 1.1))))
 '(org-drawer ((t (:foreground "SlateGray4" :weight light :height 0.8))))
 '(org-ellipsis ((t (:foreground "#c9880e" :weigth extra-bold :height 0.9 :underline nil))))
 '(org-headline-done ((t (:foreground "gray"))))
 '(org-level-1 ((t (:inherit outline-1 :weight bold :height 1.1))))
 '(org-level-2 ((t (:inherit outline-2 :weight bold :height 1.1))))
 '(org-level-3 ((t (:inherit outline-3 :weight bold :height 1.0))))
 '(org-level-4 ((t (:inherit outline-4 :weight bold :height 1.0))))
 '(org-level-5 ((t (:inherit outline-5 :weight normal :height 1.0))))
 '(org-meta-line ((t (:foreground "SlateGray4" :weight light :height 0.96))))
 '(org-modern-block-name ((t (:weight semi-light :height 0.8))))
 '(org-modern-label ((t (:box t (:line-width (0 . -3) :color "#263238") :underline nil :weight extra-bold :height 0.95 :width condensed))))
 '(org-modern-todo ((t (:inherit (org-todo org-modern-label) :inverse-video t :underline nil :weight extra-bold :height 0.95 :width condensed))))
 '(org-property-value ((t (:foreground "SlateGray3" :weight light :height 0.8))))
 '(org-scheduled-today ((t (:foreground "dark gray"))))
 '(org-special-keyword ((t (:foreground "SlateGray3" :weight light :height 0.8))))
 '(org-table ((t (:inherit fixed-pitch :height 0.8))))
 '(org-tag ((t (:foreground "cyan3" :weight normal))))
 '(org-time-grid ((t (:foreground "gray80"))))
 '(org-upcoming-distant-deadline ((t (:foreground "red1"))))
 '(org-verbatim ((t (:inherit fixed-pitch))))
 '(region ((t (:extend t :background "IndianRed4"))))
 '(shadow ((t (:foreground "rosy brown"))))
 '(show-paren-match ((t (:background "dim gray" :foreground "cyan" :weight ultra-bold))))
 '(treemacs-root-face ((t (:inherit font-lock-string-face :weight bold :height 1.0))))
 '(vertical-border ((t (:background "#1c262b" :foreground "#1c262b")))))

;; Misc
;; set keybinding for prog-mode for hideshowing using use-package
(use-package hideshow
  :bind
  (:map prog-mode-map
        ("C-+" . hs-toggle-hiding)))

(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package nerd-icons
  :ensure t
  :config
  (setq nerd-icons-font-family "SauceCodePro Nerd Font"))

;; ========== Developer configurations ===========
(use-package fzf
  :ensure t
  :pin melpa
  :bind
    ;; TODO(slams): set keybinds
  :config
  (setq fzf/args "-x --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        fzf/grep-command "rg --no-heading -nH"
        ;; fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom nil
        fzf/window-height 15))

(use-package dumb-jump
  :ensure t)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

;; (use-package rg
;;   :ensure t)
;; (rg-enable-default-bindings)

(use-package highlight-indent-guides
  :ensure t
  ;; :hook  (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'bitmap
        highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))

(use-package highlight-symbol
  :ensure t
  :config
  (setf highlight-symbol-idle-delay 0)
  :bind (("M-s" . highlight-symbol-at-point)
         ("M-S" . highlight-symbol-remove-all)))

(use-package idle-highlight-mode
  :ensure t
  :config (setq idle-highlight-idle-time 1))

(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))

(use-package multiple-cursors
  :ensure t
  :bind (("C->" . mc/mark-next-like-this-symbol)
         ("C-<" . mc/mark-previous-like-this-symbol)
         ("C-x m" . mc/mark-all-symbols-like-this)
         ("C-x S-m" . mc/mark-all-dwim)))

(use-package imenu-list
  :ensure t
  :bind ("C-." . imenu-list-minor-mode)
  :config
  (setq imenu-list-focus-after-activation nil))
(global-set-key (kbd "C-'") #'imenu-list-smart-toggle)

;; (use-package imenu-anywhere
;;   :ensure t
;;   :bind (("C-." . ido-imenu-anywhere)))

(use-package bicycle
  :after outline
  :bind (:map outline-minor-mode-map
              ([C-tab] . bicycle-cycle)
              ([S-tab] . bicycle-cycle-global)))

(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-x p" . projectile-command-map)
              :map projectile-command-map
              ("A" . projectile-add-known-project))
  :config
  (setq projectile-project-search-path '(("~/git" . 1)))
  (setq projectile-enable-caching t)
  ;; (setq projectile-completion-system 'vertico)
  (setq projectile-switch-project-action #'projectile-dired)
  (setq projectile-per-project-compilation-buffer t)
  (setq projectile-globally-ignored-buffers '("*scratch*" "*Messages*"
                                              "*Warnings*" "*Help*"
                                              "*Customize*" "*Echo*" "*vterm*"
                                              "*dashboard*" "*Org Agenda*"
                                              "*Calendar*" "*server*" "*gnus*"
                                              "*mm*" "*copilot*")))

(use-package treemacs
  :ensure t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 1 0)
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-display-current-project-exclusively t
          treemacs-indentation                     1
          treemacs-indentation-guide-mode          t
          treemacs-indentation-guide-style         'line
          treemacs-project-follow-mode             t
          treemacs-follow-after-init               t
          treemacs-width-is-initially-locked       nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (setq treemacs-resize-icons 12)

    (treemacs-follow-mode t)
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-nerd-icons
  :ensure t
  :after treemacs nerd-icons all-the-icons
  :config
  (treemacs-load-theme "nerd-icons")
  (treemacs-refresh))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package json
  :ensure t
  :config
  (add-hook 'json-mode-hook 'json-mode))

;; ======= Language configuration ============
(add-to-list `auto-mode-alist '("\\.svg\\'" . nxml-mode))

(use-package python-mode
  :ensure t
  :hook ((prog-mode . (lambda ()
                        (setq toggle-word-wrap 0)
                        (setq fill-column 88)
                        (setq display-fill-column-indicator 1)
                        (setq display-fill-column-indicator-column 88)))))

(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter
                      (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(use-package blacken
  :ensure t)

(use-package py-isort
  :ensure t)

(use-package groovy-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gvy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gy$" . groovy-mode))
  :config
  (setf (alist-get "Jenkinsfile.+$" auto-mode-alist) 'groovy-mode)
  (setq compile 'jenkins-lint))

(defvar yaml-formatting-enabled nil
  "Whether YAML formatting is currently enabled.")

(use-package yaml-mode
  :ensure t
  :hook
  ((yaml-mode . outline-minor-mode)
   ;; (yaml-mode . hs-minor-mode)
   (yaml-mode . display-line-numbers-mode)
   (yaml-mode . le/yaml-mode-setup)
   ;; (yaml-mode . highlight-indent-guides-mode)
   (yaml-mode . (lambda ()
                  (add-hook 'after-save-hook 'le/yaml-frmt nil t))))
  :config
  (defvar yaml-formatting-enabled t)
  (setq fill-column 200)
  (defun toggle-yaml-formatting ()
    "Toggle the state of YAML formatting."
    (interactive)
    (setq yaml-formatting-enabled (not yaml-formatting-enabled))
    (message "YAML formatting %s" (if yaml-formatting-enabled "enabled" "disabled")))
  (defun le/yaml-frmt ()
    "Conditionally reformat YAML file with yq based on `yaml-formatting-enabled'."
    (interactive)
    (when (and yaml-formatting-enabled (eq major-mode 'yaml-mode))
      (shell-command-to-string (format "yq eval-all -i %s" buffer-file-name))
      (revert-buffer t t t)
      (message "YAML file reformatted.")))
  (defun le/yaml-mode-setup ()
    "Setup yaml mode"
    (setq hs-minor-mode -1)))

(use-package terraform-mode
  :ensure t
  :bind (:map terraform-mode-map
              ("C-+" . hs-toggle-hiding))
  :config
  (defun frmt-hcl ()
    "Reformat HCL file with terraform fmt."
    (when (eq major-mode 'terraform-mode)
      (shell-command-to-string (format "terraform fmt %s" buffer-file-name))
      (auto-revert-mode)))
  (add-hook 'after-save-hook 'frmt-hcl)
  (add-hook 'terraform-mode-hook 'outline-minor-mode)
  ;; (add-hook 'terraform-mode-hook 'highlight-indent-guides-mode)
  ;; (add-hook 'terraform-mode-hook 'hs-minor-mode)
  (add-hook 'terraform-mode-hook 'display-line-numbers-mode))

(use-package markdown-mode
  :ensure t
  :bind (:map markdown-mode-map
              ("C-+" . hs-toggle-hiding))
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config
  (add-hook 'markdown-mode-hook 'outline-minor-mode)
  ;; (add-hook 'markdown-mode-hook 'highlight-indent-guides-mode)
  ;; (add-hook 'markdown-mode-hook 'hs-minor-mode)
  (add-hook 'markdown-mode-hook 'display-line-numbers-mode))

;; Linters and formatters
(use-package python-black
  :ensure t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))

;; (with-eval-after-load 'flycheck
;;   (flycheck-grammarly-setup))
;; (setq flycheck-grammarly-check-time 1.0)

(use-package flycheck
  :ensure t
  ;; :init (global-flycheck-mode)
  :bind (("M-n" . flycheck-next-error)
         ("M-p" . flycheck-previous-error))
  :config (setq-default flycheck-checker-error-threshold 2048)
  ;; add a lambda for flycheck-rror-list-mode-hook
  (add-hook 'flycheck-error-list-mode-hook
            (lambda ()
              (setq tabulated-list-format '[("Line" 5 flycheck-error-list-entry-< :right-align t)
                                            ("Col" 3 nil :right-align t)
                                            ("Level" 8 flycheck-error-list-entry-level-<)
                                            ("ID" 20 t)
                                            (#("Message (Checker)" 0 9
                                               (face default)
                                               9 16
                                               (face flycheck-error-list-checker-name)
                                               16 17
                                               (face default))
                                             0 t)]))))

;;  :config (setq-default flycheck-disabled-checkers '(emacs-lisp)))

(use-package flycheck-posframe
  :ensure t
  :after flycheck
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
  (flycheck-posframe-configure-pretty-defaults)
  (setq flycheck-posframe-warning-prefix "\u26a0 "))

;; Productivity
(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo "copilot-emacs/copilot.el"
                   :branch "main"
                   :files ("*.el"))
  :ensure t
  :hook ((post-command-hook . copilot-clear-overlay))
         ;;(prog-mode . copilot-mode))
  :bind (("M-\\" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . copilot-clear-overlay)
         ("<ESC>" . copilot-clear-overlay)
         ("C-p" . copilot-previous-completion)
         ("C-n" . copilot-next-completion)
         ("<tab>" . copilot-accept-completion)
         ("[tab]" . copilot-accept-completion)
         ("C-w" . copilot-accept-completion-by-word)
         ("C-l" . copilot-accept-completion-by-line))
  :config
  (setq copilot-idle-delay .5)
  (setq copilot-max-chars 1000000))

;; ibuffer
(use-package ibuffer
  :bind ("C-x C-b" . 'ibuffer)
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-expert t)
  (ibuffer-saved-filter-groups
   '(("default"
      ("Magit"
       (or
        (mode . magit-status-mode)
        (mode . magit-log-mode)
        (name . "\\*magit")
        (name . "magit-")
        (name . "git-monitor")))
      ("Commands"
       (or
        (mode . shell-mode)
        (mode . ansi-mode)
        (mode . eshell-mode)
        (mode . term-mode)
        (mode . compilation-mode)))
      ("Rust"
       (or
        (mode . rust-mode)
        (mode . cargo-mode)
        (name . "\\*Cargo")
        (name . "^\\*rls\\(::stderr\\)?\\*")
        (name . "eglot")))
      ("C++"
       (or
        (mode . c-mode)
        (mode . c++-mode)))
      ("Lisp"
       (mode . emacs-lisp-mode))
      ("Dired"
       (mode . dired-mode))
      ("Gnus"
       (or
        (mode . message-mode)
        (mode . mail-mode)
        (mode . gnus-group-mode)
        (mode . gnus-summary-mode)
        (mode . gnus-article-mode)
        (name . "^\\.newsrc-dribble")
        (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
        (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
        (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
      ("Org"
       (or
        (name . "^\\*Calendar\\*$")
        (name . "^\\*Org Agenda")
        (name . "^ \\*Agenda")
        (name . "^diary$")
        (mode . org-mode)))
      ("Perl"
       (or
        (mode . cperl-mode)
        (mode . perl-mode)))
      ("Python"
       (mode . python-mode))
      ("Terraform"
       (or
        (mode . terraform-mode)
        (name . "^\\.tf")
        (name . "^\\.tfvars")))
      ("Go"
       (or
        (mode . go-mode)
        (name . "^\\.go")))
      ("Groovy"
       (or
        (mode . groovy-mode)
        (name . "^\\.groovy")
        (name . "^\\.gy")
        (name . "^\\.gvy")))
      ("Yaml"
       (or
        (mode . yaml-mode)
        (name . "^\\.yaml")
        (name . "^\\.yml")))
      ("JSON"
       (or
        (mode . json-mode)
        (name . "^\\.json")))
      ("Markdown"
       (or
        (mode . markdown-mode)
        (name . "^\\.md")))
      ("Emacs"
       (or
        (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*\\(Customize\\|Help\\)")
        (name . "\\*\\(Echo\\|Minibuf\\)"))))))
  (ibuffer-show-empty-filter-groups nil)
  (ibuffer-shrink-to-minimum-size t t)
  (ibuffer-use-other-window nil)
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))

(defun le/org-mode-visual-fill ()
  "Setup visual-fill-mode."
  (setq visual-fill-column-width 180
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :defer t
  :hook (org-mode . le/org-mode-visual-fill))

(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)

(defun le/what-face (pos)
  "Show the face at the current point (POS) in the minibuffer."
  (interactive "d")
  (let ((face (or (get-char-property pos 'read-face-name)
                  (get-char-property pos 'face))))
    (if face
        (message "Face: %s" face)
      (message "No face at %d" pos))))

(defun le/org-mode-return ()
  "Insert a new heading or continue list item on RET, depending on context."
  (interactive)
  (if (org-at-heading-p)
      (org-return)
    (let ((line-start (buffer-substring-no-properties
                       (line-beginning-position)
                       (line-end-position))))
      (cond
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) \\[ \\]" line-start) ; Checkbox items
        (org-insert-item t))
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) " line-start) ; Unordered list items
        (org-insert-item))
       ((string-match "^ *\\([0-9]+\\)\\(\\.\\|)\\) " line-start) ; Ordered list items
        (org-insert-item nil))
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) .* :: " line-start) ; Term/Description
        (org-insert-item))
       (t
        (org-return))))))

(defun le/org-mode-basic-setup ()
  "Perform some basic non-org-mode configuration setup at hook execution."
  (variable-pitch-mode 1)
  (setq-local line-spacing 0.2)
  (auto-fill-mode 0)
  (visual-line-mode t)
  (setq-local show-trailing-whitespace nil)
  (setq-local hl-line-mode nil))

;; start of "use-package org" for the main org-mode section
(use-package org
  :defer t
  :init
  (setq org-replace-disputed-keys t)
  :hook
  (org-mode . le/org-mode-basic-setup)
  (org-mode . le/org-mode-visual-fill)
  :mode (("\\.org$" . org-mode))
  :custom
  (org-startup-indented t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  :config
  (add-hook 'org-mode-hook
          (lambda ()
            (setq-local yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)
            (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)))
  (setq org-capture-templates
        '(("t" "Tech Note" entry
           (file+headline "~/git/org-roam/inbox.org" "Tech Notes")
           "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")))
  (define-key org-mode-map (kbd "RET")  #'le/org-mode-return)
  (setq
   org-auto-align-tags t
   org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))
   org-catch-invisible-edits 'show-and-error
   org-cycle-separator-lines 2
   org-fontify-quote-and-verse-blocks t
   org-hide-emphasis-markers t
   org-insert-heading-respect-content nil
   org-list-indent-offset 2
   org-log-repeat t
   org-pretty-entities t
   org-return-follows-link  t
   org-special-ctrl-a/e t
   org-support-shift-select nil
   org-startup-with-inline-images t
   org-image-actual-width nil
   org-image-max-width 300

   org-ellipsis "  🡇"
   org-clock-sound "~/.emacs.d/org/media/alarm.wav"
   ;; TODO keywords setup
   org-todo-keywords
   '((sequence "TODO(t)" "IN-PROGRESS(p)" "IN-REVIEW(r)" "WAITING(w)" "BLOCKED(b)" "WONT-DO(x)" "|" "DONE(d)" "DELEGATE(D)")
     (sequence "REPEAT(R)" "|" "DONE(d)"))

   ;; ("TODO" . (:background "#c3e88d" :foreground "white" :weight extra-bold))
   ;; TODO face setup;
   org-modern-todo-faces
   '(("IN-PROGRESS" . (:background "DarkOrange" :foreground "white" :weight extra-bold))
     ("REPEAT" . (:background "DarkViolet" :foreground "white" :weight extra-bold))
     ("IN-REVIEW" . (:background "RoyalBlue" :foreground "white" :weight extra-bold))
     ("WAITING" . (:background "DarkOrange3" :foreground "white" :weight extra-bold))
     ("BLOCKED" . (:background "red" :foreground "white" :weight extra-bold))
     ("WONT-DO" . (:background "plum" :foreground "black" :weight extra-bold))
     ("DELEGATE" . (:background "DimGrey" :foreground "white" :weight extra-bold))
     ("DONE" . (:background "DarkGreen" :foreground "white" :weight extra-bold)))

   org-tag-faces
   '(("pin" . (:foreground "red" :weight bold)))

   ;; Agenda styling
   org-agenda-tags-column -80
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────"
   )

  (setq org-modules
        '(org-habit
          org-bookmark
          org-eshell))

  (setq org-refile-targets '((nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (makefile . t)
     (css . t)
     (eshell . t)
     (dot . t)
     (java . t)
     (js . t)
     (perl . t)
     (processing . t)
     (sql . t)
     (sqlite . t)
     (org . t)
     (shell . t)
     (C . t)
     (sed . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)) ;; org-mode. End of "use-package org"

(use-package org-modern
  :ensure t
  :custom
  (org-modern-hide-stars nil)
  (org-modern-hide-properties nil)
  (org-modern-property nil)
  (org-modern-keyword nil)
  (org-modern-footnote nil)
  (org-modern-property nil)
  (org-modern-block-name nil)
  (org-modern-star 'replace)
  (org-modern-replace-stars "◉○●○●○●")
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda))


;; Function to quickly capture fleeting notes from anywhere
(defun le/capture-fleeting-note ()
  "Quickly capture a fleeting note."
  (interactive)
  (org-roam-capture nil "f"))

;; Function to review fleeting notes
(defun le/review-fleeting-notes ()
  "Open a buffer with all unprocessed fleeting notes."
  (interactive)
  (org-agenda nil "f"))

;; Quick capture function for brag notes
(defun le/capture-brag-note ()
  "Quickly capture a brag-worthy achievement."
  (interactive)
  (org-roam-capture nil "b"))

;; Function to review fleeting notes
(defun le/review-brag-notes ()
  "Open a buffer with all unprocessed brag notes."
  (interactive)
  (org-agenda nil "b"))

;; Function to quickly capture ideas
(defun le/capture-idea-note ()
  "Quickly capture a idea note."
  (interactive)
  (org-roam-capture nil "!"))

;; Function to review fleeting notes
(defun le/review-idea-notes ()
  "Open a buffer with all unprocessed idea notes."
  (interactive)
  (org-agenda nil "!"))

;; org-roam base configuration
(use-package org-roam
  :custom
  (org-roam-directory (file-truename "~/git/org-roam"))
  (org-roam-db-location "~/git/org-roam/org-roam.db")
  (org-roam-database-connector 'sqlite-builtin)
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ("C-c n j" . org-roam-dailies-capture-today)
         ("C-c n q" . le/capture-fleeting-note)
         ("C-c n r" . le/review-fleeting-notes)
         ("C-c n b" . le/capture-brag-note)
         ("C-c n !" . le/capture-idea-note))
  :config
  ;; Ensure main directory exists
  (make-directory (file-truename org-roam-directory) t)

  ;; Set the display template without custom node-type method
  (setq org-roam-node-display-template
        (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

  (setq my-fleeting-notes-dir "~/git/org-roam/fleeting")
  (setq my-brag-notes-dir "~/git/org-roam/brag")
  (setq my-idea-notes-dir "~/git/org-roam/ideas")

  ;; Set up directories for different note types
  (make-directory "~/git/org-roam" t)
  (make-directory "~/git/org-roam/kb" t)
  (make-directory "~/git/org-roam/brag" t)
  (make-directory "~/git/org-roam/ideas" t)
  (make-directory my-fleeting-notes-dir t)

  ;; Configure capture templates for different types of notes
  (setq org-roam-capture-templates
        '(("k" "kb" plain
           "\n* %(replace-regexp-in-string \"-+\" \" \" \"${title}\")\n\n%?"
           :target (file+head "kb/${slug}.org"
                              "#+title: ${title}\n#+category: kb\n#+filetags: :kb:\n#+startup: inlineimages\n")
           :immediate-finish t
           :unnarrowed t)
          ("f" "fleeting" plain
           "\n\n* %?\n\n  *Captured on %T*"
           :target (file+head "fleeting/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+category: fleeting\n#+filetags: :fleeting:\n#+created: %U\n#+deadline: %(org-insert-time-stamp (time-add (current-time) (days-to-time 2)))\n")
           :unnarrowed t)
          ("b" "brag" plain
           "\n* Achievement Summary\n%?\n\n* Impact\n- Business Impact:\n- Technical Impact:\n- Team Impact:\n\n* Key Metrics\n- Quantitative:\n- Qualitative:\n\n* Context\n- Challenge Overcome:\n- Skills Demonstrated:\n\n* Supporting Details\n- Project Name:\n- Timeline:\n- Collaborators:\n\n* Follow-up Items\n- [ ] Add relevant metrics when available\n- [ ] Gather peer feedback\n- [ ] Update resume with achievement\n\n* Tags\n\n* Date Range\n- Started: %^{Started}t\n- Completed: %^{Completed}t\n"
           :target (file+head "brag/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+category: brag\n#+filetags: :brag:achievement:\n#+created: %U\n")
           :unnarrowed t)
          ("!" "idea" plain
           "\n* %(replace-regexp-in-string \"-+\" \" \" \"${title}\")\n\n%?"
           :target (file+head "ideas/${slug}.org"
                              "#+title: ${title}\n#+category: idea\n#+filetags: :idea:\n#+startup: inlineimages\n")
           :immediate-finish t
           :unnarrowed t)))

  (setq org-agenda-custom-commands
        '(("f" "Fleeting Notes Dashboard"
           ((tags "fleeting"
                  ((org-agenda-files (list my-fleeting-notes-dir))
                   (org-agenda-prefix-format '((tags . "FLEETING-NOTE ")))
                   (org-agenda-sorting-strategy '(timestamp-up))
                   (org-agenda-overriding-header "Fleeting Notes Dashboard\n")
                   ;; Extract and show the captured date from the content
                   (org-agenda-format-item
                    (lambda (cat tags priority txt &optional beg end)
                      (let* ((txt-copy txt)
                             (date-string
                              (if (string-match "\\*Captured on <\\([^>]+\\)>" txt-copy)
                                  (match-string 1 txt-copy)
                                "")))
                        (format "%s %s <%s>" cat txt date-string))))))))
          ("b" "Brag Notes Dashboard"
           ((tags "brag"
                  ((org-agenda-files (list my-brag-notes-dir))
                   (org-agenda-prefix-format '((tags . "BRAG-NOTE ")))
                   (org-agenda-sorting-strategy '(timestamp-up))
                   (org-agenda-overriding-header "Brag Notes Dashboard\n")
                   ;; Extract and show the captured date from the content
                   (org-agenda-format-item
                    (lambda (cat tags priority txt &optional beg end)
                      (let* ((txt-copy txt)
                             (date-string
                              (if (string-match "\\*Captured on <\\([^>]+\\)>" txt-copy)
                                  (match-string 1 txt-copy)
                                "")))
                        (format "%s %s <%s>" cat txt date-string))))))))
          ("!" "Idea Notes Dashboard"
           ((tags "idea"
                  ((org-agenda-files (list my-idea-notes-dir))
                   (org-agenda-prefix-format '((tags . "IDEA-NOTE ")))
                   (org-agenda-sorting-strategy '(timestamp-up))
                   (org-agenda-overriding-header "Idea Notes Dashboard\n")
                   ;; Extract and show the captured date from the content
                   (org-agenda-format-item
                    (lambda (cat tags priority txt &optional beg end)
                      (let* ((txt-copy txt)
                             (date-string
                              (if (string-match "\\*Captured on <\\([^>]+\\)>" txt-copy)
                                  (match-string 1 txt-copy)
                                "")))
                        (format "%s %s <%s>" cat txt date-string))))))))))

  (org-roam-db-autosync-mode))

;; org-download configuration for images
(use-package org-download
  :after org
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "~/git/org-roam/images")
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  :bind
  (:map org-mode-map
        (("C-c d s" . org-download-screenshot)
         ("C-c d d" . org-download-delete)))
  :config
  (make-directory "~/git/org-roam/images" t))

;; org-noter for PDF annotations
(use-package org-noter
  :ensure t
  :after org
  :custom
  (org-noter-notes-search-path '("~/git/org-roam"))
  (org-noter-default-notes-file-names '("notes.org"))
  (org-noter-separate-notes-from-heading t))

;; org-roam-ui configuration
(use-package org-roam-ui
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))

;; PDF Tools (recommended for org-noter)
(use-package pdf-tools
  :ensure t
  :custom
  (pdf-view-display-size 'fit-page)
  :config
  (pdf-tools-install :no-query))

(use-package org-make-toc
  :ensure t
  :hook (org-mode . org-make-toc-mode))

(require 'ox-publish)

(require 'ox-md)

(use-package org-projectile
 :ensure t
 :bind (("C-c n p" . org-projectile-project-todo-completing-read)
        ("C-c l" . org-store-link)
        ("C-c a" . org-agenda)
        ("C-c c" . org-capture))
 :config
 (progn
   (setq org-projectile-projects-file
         (expand-file-name "~/git/projects-org/project.org"))
   (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
   (push (org-projectile-project-todo-entry) org-capture-templates)))

(use-package magit
  :ensure t
  :hook (after-save . magit-after-save-refresh-status)
  :config
  (defun le/magit-display-buffer-pop-up-frame (buffer)
    (if (with-current-buffer buffer (eq major-mode 'magit-status-mode))
        (display-buffer buffer
                        '((display-buffer-reuse-window
                           display-buffer-below-selected)
                          (reusable-frames . t)))
      (magit-display-buffer-traditional buffer)))
)

;; UI
;; Configure doom-modeline
(use-package doom-modeline
  :ensure t
  :init (setq doom-modeline-support-imenu t)
  :after eshell
  :config (setq doom-modeline-icon t
                doom-modeline-major-mode-icon t
                doom-modeline-major-mode-color-icon t
                doom-modeline-buffer-state-icon t
                doom-modeline-buffer-modification-icon t
                doom-modeline-indent-info t
                doom-modeline-env-enable-python t
                doom-modeline-github t
                doom-modeline-github-interval (* 30 60)
                doom-modeline-modal t
                doom-modeline-modal-icon t
                doom-modeline-vcs-max-length 48
                doom-modeline-buffer-file-name-style 'truncate-with-project)
  :hook (after-init . doom-modeline-mode))

(use-package jinja2-mode
  :ensure t)

;; Configure doom-themes
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-material t)

  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  ;; (doom-themes-treemacs-config)
  ;; (doom-themes-treemacs-theme)
  (doom-themes-org-config))

;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :custom
  (setq vertico-cycle t)
  (vertico-count 20))

(use-package vertico-posframe
  :ensure t
  :after vertico
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8)))


  (setq le-bottom-center-width-7-posframe-config
      '(posframe
        (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center)
        (vertico-posframe-border-width . 7)
        (vertico-posframe-fallback-mode . vertico-buffer-mode)))

  (setq vertico-multiform-commands
      (append
       (mapcar (lambda (cmd) (cons cmd le-bottom-center-width-7-posframe-config))
               '(consult-line consult-buffer consult-ls-git consult-grep
                              consult-ripgrep consult-imenu consult-bookmark))
       '((consult-projectile
          posframe
          ;; (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
          (vertico-posframe-border-width . 7)
          (vertico-posframe-fallback-mode . vertico-buffer-mode))
         (t posframe)
         (execute-extended-command unobtrusive))))

  (setq vertico-multiform-categories
        '((file grid)))
  (vertico-multiform-mode 1))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure t
  :init
  (savehist-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(partial-completion substring initials flex orderless basic))
  (orderless-component-separator "[ //]+"))

(use-package consult-lsp
  :ensure t)

(use-package consult
  :ensure t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind
  ("M-y" . consult-yank-pop)
  ("C-x y" . consult-yasnippet)
  :bind-keymap
  ("C-x c" . consult-command-map)
  :init
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (defvar consult-command-map
    (let ((map (make-sparse-keymap)))
      (define-key map "b" #'consult-buffer)
      (define-key map "l" #'consult-line)
      (define-key map "i" #'consult-imenu)
      (define-key map "r" #'consult-ripgrep)
      (define-key map "f" #'consult-find)
      (define-key map "F" #'consult-focus-lines)
      (define-key map "G" #'consult-global-mark)
      (define-key map "y" #'consult-yasnippet)

      ;; nested keymap for 'p' prefix (projectile)
      (let ((projectile-map (make-sparse-keymap)))
        (define-key projectile-map "p" #'consult-projectile)
        (define-key projectile-map "f" #'consult-projectile-find-file)
        (define-key projectile-map "o" #'consult-projectile-find-file-other-window)
        (define-key projectile-map "r" #'consult-projectile-recentf)
        (define-key projectile-map "s" #'consult-projectile-switch-project)
        (define-key projectile-map "b" #'consult-projectile-switch-to-buffer)
        (define-key projectile-map "d" #'consult-projectile-find-dir)
        (define-key map "p" projectile-map))

      ;; nested keymap for 'g' prefix (git)
      (let ((git-map (make-sparse-keymap)))
        (define-key git-map "g" #'consult-git-grep)
        (define-key git-map "l" #'consult-ls-git)
        (define-key git-map "L" #'consult-ls-git-other-window)
        (define-key map "g" git-map))
      map))
  :config
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep)
  (setq
   consult-narrow-key "<"))

(defun le/centaur-tabs-buffer-groups ()
  "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from
`eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode'
`magit-mode'.

All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
  (list
   (cond
    ((or (string-equal "*" (substring (buffer-name) 0 1))
         (memq major-mode '(magit-process-mode
                            magit-status-mode
                            magit-diff-mode
                            magit-log-mode
                            magit-file-mode
                            magit-blob-mode
                            magit-blame-mode
                            vterm-mode
                            tags-table-mode
                            )))
     "Emacs")
    ((derived-mode-p 'prog-mode)
     "Development")
    ((derived-mode-p 'dired-mode)
     "Dired")
    ((memq major-mode '(helpful-mode
                        help-mode))
     "Help")
    ((memq major-mode '(org-mode
                        org-agenda-clockreport-mode
                        org-src-mode
                        org-agenda-mode
                        org-beamer-mode
                        org-indent-mode
                        org-bullets-mode
                        org-cdlatex-mode
                        org-agenda-log-mode
                        diary-mode))
     "OrgMode")
    (t
     (centaur-tabs-get-group-name (current-buffer))))))

(use-package centaur-tabs
  :ensure t
  :demand
  :hook
  (calendar-mode . centaur-tabs-local-mode)
  (centaur-tabs-mode . le/centaur-tabs-buffer-groups)
  (dashboard-mode . centaur-tabs-local-mode)
  (eshell-mode . centaur-tabs-local-mode)
  (helpful-mode . centaur-tabs-local-mode)
  (imenu-list-major-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (tags-table-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (vterm-mode . centaur-tabs-local-mode)
  :config
  ;; set the terraform-mode icon to purple
  (defun le/my-centaur-tabs-icon-for-ansi-term (original-fn mode &rest args)
    "Change the face of the icon when MODE is 'ansi-term."
    (let ((new-args (if (eq mode 'term-mode)
                        (plist-put args :face 'all-the-icons-purple)
                      args)))
      (apply original-fn mode new-args)))
  (advice-add 'centaur-tabs--icon-for-mode :around #'le/my-centaur-tabs-icon-for-ansi-term)
  (setq centaur-tabs-set-modified-marker t
        centaur-tabs-set-icons t
        centaur-tabs-icon-type 'all-the-icons
        centaur-tabs-plain-icons nil
        centaur-tabs-gray-out-icons nil
        centaur-tabs-set-bar 'over
        x-underline-at-descent-line t
        ;; centaur-tabs-projectile-buffer-group-calc t
        centaur-tabs-style "bar"
        centaur-tabs-height 32
        centaur-tabs-set-close-button "X"
        centaur-tabs-label-fixed-length 10)
  (centaur-tabs-mode t)
  :bind
  ("s-t" . centaur-tabs--create-new-tab)
  ("s-}" . centaur-tabs-forward)
  ("s-{" . centaur-tabs-backward))

(use-package marginalia
  :ensure t
  :init
  (marginalia-mode)
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle)))

(use-package company
  :ensure t
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)
  (setq company-global-modes '(not text-mode fundamental-mode))
  )

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode)
  :config (setq company-box-doc-enable t))

(use-package company-quickhelp
  :ensure t
  :hook (company-mode . company-quickhelp-mode))

;; (require 'tree-sitter)
;; (require 'tree-sitter-langs)

(use-package corfu
  :ensure t)

(defun le/corfu-lsp-setup ()
  (corfu-mode)
  (setq-local completion-styles '(orderless)
              completion-category-defaults nil))

(use-package lsp-mode
  :ensure t
  :hook ((terraform-mode . lsp-deferred)
         le/corfu-lsp-setup)
  :config (setq lsp-enable-links t
                read-process-output-max (* 2048 2048)
                lsp-use-plists t
                lsp-log-io nil
                lsp-semantic-tokens-enable t
                lsp-semantic-tokens-honor-refresh-requests t
                lsp-disabled-clients '(tfls)
                lsp-terraform-ls-enable-show-reference t
                lsp-terraform-ls-prefill-required-fields t
                lsp-enable-links t
                lsp-semantic-tokens-enable t
                lsp-semantic-tokens-honor-refresh-requests t
                lsp-ansible-add-on t
                lsp-enable-symbol-highlighting t
                lsp-groovy-server-file (concat (getenv "HOME") "/.emacs.d/.cache/lsp/groovy-language-server-all.jar")
                lsp-groovy-classpath (concat (getenv "HOME") "/groovy-language-server/build/libs"))
  :commands (lsp lsp-deferred))

(use-package lsp-ui
  :commands lsp-ui-mode
  :ensure t
  :config (setq lsp-ui-sideline-show-diagnostics t
                lsp-ui-sideline-show-hover t
                lsp-ui-sideline-show-code-actions t
                lsp-ui-sideline-update-mode 'line
                lsp-ui-peek-enable t
                lsp-ui-peek-show-directory t
                lsp-ui-doc-enable t
                lsp-ui-doc-delay 5
                lsp-ui-doc-show-with-cursor t
                lsp-ui-doc-position 'top))

(use-package lsp-treemacs
  :ensure t
  :custom
  (lsp-treemacs-theme "Default")
  :config (lsp-treemacs-sync-mode 1)
  :commands lsp-treemacs-errors-list)

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))

(use-package dashboard
  :ensure t
  :config (dashboard-setup-startup-hook)
          (setq dashboard-display-icons-p t
                dashboard-icon-type 'nerd-icons
                dashboard-startup-banner 'logo))

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 3))

(defun le/emojify-setup ()
  "Setup emojify on hook execution."
  (global-emojify-mode -1))
;; (company-emoji-init))

(use-package emojify
  :ensure t
  :hook (after-init . le/emojify-setup)
  :config (setq emojify-display-style 'unicode))

(defun le/enable-company-emoji ()
  "Add company-emoji backend to company-backends."
  (interactive)
  (unless (member 'company-emoji company-backends)
    (setq company-backends (push 'company-emoji company-backends))
    (message "company-emoji backend enabled.")))

(defun le/disable-company-emoji ()
  "Remove company-emoji backend from company-backends."
  (interactive)
  (when (member 'company-emoji company-backends)
    (setq company-backends (remove 'company-emoji company-backends))
    (message "company-emoji backend disabled.")))

(use-package company-emoji
  :ensure t)

(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))

(use-package bats-mode
  :ensure t)

(use-package dockerfile-mode
  :ensure t
  :defer 2
  :mode
  ("Dockerfile\\'" . dockerfile-mode))

(use-package eterm-256color
  :ensure t)

(use-package vterm
  :ensure t
  :bind ("C-c t" . vterm)
  :hook
  (vterm-mode . eterm-256color-mode)
  :config
  (setq vterm-copy-exclude-prompt t
        vterm-kill-buffer-on-exit t
        vterm-use-vterm-prompt-detection-method t
        vterm-max-scrollback 5000))

(use-package k8s-mode
  :ensure t
  :defer t
  :commands (k8s-mode))

(use-package gptel
  :ensure t
  ;; rewrite the bind to use a keymap instead of a list
  :bind (([(super return)] . gptel-send)
         ("C-x l" . gptel-menu)
         ("C-x L p" . gptel-org-set-properties)
         ("C-x L t" . gptel-org-set-topic)
         ("C-x L a" . gptel-add)
         ("C-x L f" . gptel-add-file)
         ("C-x L r" . gptel-rewrite)
         )
  :init
  ;; (add-hook 'gptel-post-response-functions 'gptel-end-of-response)
  :config
  (setq-local show-trailing-whitespace nil)
  (add-to-list 'gptel-directives '(Ai-Expert . "You are an AI expert on LLMs, stable diffusion (text2image), AI video generation (text2video, video2video), and the tools that implement them."))
  (add-to-list 'gptel-directives '(Python . "You are a Python and conda expert. Give accurate and concise answers. Please do not hallucinate or make up stuff. If you don't know the answer or information, please indicate that you do not know."))
  (add-to-list 'gptel-directives '(Linux . "You are an expert system administrator for Fedora Linux Server. Provide concise, structured, and accurate answers. If I need in-depth information or a detailed explanation, I will request it. If you do not know the answer or information to provide, please admit that instead of making something up."))
  (setq
   gptel-model 'llama3.3:latest
   gptel-backend (gptel-make-ollama "Ollama"
                   :host "localhost:11434"
                   :stream t
                   :models '("llama3.3:latest"
                             "bwf-lit-expert:latest"
                             "bwf-yt-video-series-producer:latest"
                             "bwf-yt-video-series-producer-qwen2_5-72b:latest"
                             "bwf-yt-video-series-producer-qwen2_5:latest"
                             "codegemma:7b-instruct-fp16"
                             "codegemma:latest"
                             "deepseek-coder-v2:16b-lite-instruct-fp16"
                             "dolphin-mixtral:8x22b"
                             "ft-art-dir:latest"
                             "gemma2:27b"
                             "gemma2:9b"
                             "le-ai-consultant:latest"
                             "le-ai-learn:latest"
                             "le-ai-learn-qwen2_5-72b:latest"
                             "le-ai-pc:latest"
                             "le-career-and-job-consultant:latest"
                             "le-cyber-security-gemma2:latest"
                             "le-cyber-security:latest"
                             "le-cyber-security-qwen2_5-72b:latest"
                             "le-cyber-security-qwen2_5:latest"
                             "le-devops:latest"
                             "le-devops-learn-gemma2-27b:latest"
                             "le-devops-learn-k8s-command-quiz:latest"
                             "le-devops-learn-k8s-free-form-quiz:latest"
                             "le-devops-learn-k8s-multi-choice-quiz:latest"
                             "le-devops-learn:latest"
                             "le-devops-learn-qwen2_5-72b:latest"
                             "le-emacs-8b:latest"
                             "le-emacs:latest"
                             "le-financial-advisor:latest"
                             "le-financial-advisor-qwen2_5-72b:latest"
                             "le-ivy-plan:latest"
                             "le-linux-admin-8b:latest"
                             "le-linux-admin:latest"
                             "le-math-8b:latest"
                             "llama3.1:70b"
                             "llama3.1:70b-instruct-q8_0"
                             "llama3.1:8b"
                             "llama3.1:8b-instruct-q8_0"
                             "llama3.2-vision:90b"
                             "llama3:8b-instruct-q8_0"
                             "mistral-nemo:12b-instruct-2407-fp16"
                             "mistral-nemo:latest"
                             "phi3:14b"
                             "phi3:latest"
                             "qwen2.5:72b"
                             )))) ;; gptel

(use-package multi-vterm
  :ensure t
  :bind ("C-c T" . multi-vterm)
  )

(use-package atomic-chrome
  :ensure t
  :config
  (atomic-chrome-start-server)
  (setq atomic-chrome-url-major-mode-alist
        '(("github\\.com" . gfm-mode)
          ("redmine" . textile-mode)
          ("gitlab" . textile-mode)
          ("jira" . textile-mode)
          ("confluence" . textile-mode)
          ("wiki" . textile-mode)
          ("localhost" . textile-mode)))
  (setq atomic-chrome-buffer-open-style 'full))

(use-package lorem-ipsum
  :ensure t)

(use-package flyspell-correct
  :ensure t
  :after flyspell
  :bind
  (:map flyspell-mode-map
        ("C-;" . flyspell-correct-wrapper)))

(use-package latex-preview-pane
  :ensure t
  :hook (latex-mode . latex-preview-pane-mode))

(use-package consult-gh
  :ensure t
  :after consult
  :init
  (require 'consult-gh)
  :custom
  (consult-gh-default-clone-directory "~/git/")
  (consult-gh-show-preview t)
  (consult-gh-repo-action #'consult-gh--repo-browse-files-action)
  (consult-gh-issue-action #'consult-gh--issue-view-action)
  (consult-gh-pr-action #'consult-gh--pr-view-action)
  (consult-gh-code-action #'consult-gh--code-view-action)
  (consult-gh-file-action #'consult-gh--files-view-action)
  (consult-gh-notifications-action #'consult-gh--notifications-action)
  (consult-gh-dashboard-action #'consult-gh--dashboard-action)
  (consult-gh-large-file-warning-threshold 2500000)
  (consult-gh-prioritize-local-folder 'suggest)
  :config
  ;; (setq consult-gh-default-orgs-list (consult-gh--get-current-orgs t))

  ;; Set default org when switching accounts
  (add-hook 'consult-gh-auth-post-switch-hook
            (lambda (&rest args)
              (setq consult-gh-default-orgs-list
                    (consult-gh--get-current-orgs t))))

  ;; Remember visited orgs/repos across sessions
  (add-to-list 'savehist-additional-variables 'consult-gh--known-orgs-list)
  (add-to-list 'savehist-additional-variables 'consult-gh--known-repos-list))


(use-package consult-gh-forge                 ;;
  :ensure t                                   ;;
  :after consult-gh                           ;;
  :config                                     ;;
  (consult-gh-forge-mode +1)                  ;;
  (setq consult-gh-forge-timeout-seconds 20)) ;;


(use-package consult-ls-git
  :ensure t)

(use-package consult-org-roam
   :ensure t
   :after org-roam
   :bind-keymap
   ("C-x c" . consult-command-map)
   :init
   (require 'consult-org-roam)
   (consult-org-roam-mode 1)
      (defvar consult-command-map
     (let ((map (make-sparse-keymap)))
       ;; nested keymap for 'n' prefix (projectile)
       (let ((projectile-map (make-sparse-keymap)))
         (define-key projectile-map "f" #'consult-org-roam-file-find)
         (define-key projectile-map "b" #'consult-org-roam-backlinks)
         (define-key projectile-map "B" #'consult-org-roam-backlinks-recursive)
         (define-key projectile-map "l" #'consult-org-roam-forward-links)
         (define-key projectile-map "r" #'consult-org-roam-search)
         (define-key map "n" projectile-map))
       map))
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key "M-."))


(use-package tree-sitter                                       ;;
  :ensure t                                                    ;;
  :config                                                      ;;
  (add-hook 'json-mode-hook #'tree-sitter-mode)                ;;
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)) ;;
                                                               ;;
(use-package tree-sitter-langs                                 ;;
  :ensure t                                                    ;;
  :config                                                      ;;
  (tree-sitter-require 'json))                                 ;;

(use-package google-this
  :ensure t
  :init
  (setq google-this-keybind (kbd "C-x G"))
  ;; :bind-keymap
  ;; ("C-x G" . google-this-mode-submap)
  :config
  (google-this-mode 1)
  (defadvice google-this (around region-search activate)
    "If region is active and RET is pressed, use it for search"
    (if (and (region-active-p) (eq (car-safe last-command-event) 'return))
        (google-this-region nil)
      ad-do-it))
  (setq google-this-keybind (kbd "C-x G"))
  (global-set-key google-this-keybind 'google-this))

(put 'narrow-to-region 'disabled nil)
(provide 'emacs)
;;; emacs ends here
