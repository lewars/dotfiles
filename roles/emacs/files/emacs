;;; .emacs --- Emacs initialization file -*- mode: emacs-lisp; lexical-binding: t; -*-
;; Copyright (C) 1996-2024 Alistair Y. Lewars

;; Author: Alistair Y. Lewars

;;; Commentary:
;;
;; Created with ❤️

;;; Code:

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

(when (string-equal system-type "gnu/linux")
  (defvar ispell-program-name "aspell"))

(defun le/monitor-name-is-eDP-1 ()
  "Return t if any monitor is named 'eDP-1'."
  (seq-some (lambda (monitor)
              (equal (cdr (assoc 'name monitor)) "eDP-1"))
            (display-monitor-attributes-list)))
(defun le/first-monitor-larger-than-3840x2400 ()
  "Check if the first monitor's geometry has a resolution greater than 3840x2400."
  (let* ((monitor-attrs (car (display-monitor-attributes-list)))
         (geometry (cdr (assoc 'geometry monitor-attrs)))
         (width (nth 2 geometry))
         (height (nth 3 geometry)))
    (and (> width 3840) (> height 2400))))


;; Global settings
(setq fill-column 120)
(setq tab-bar-show nil)
(setq scroll-up-aggressively 0.5)
(setq scroll-down-aggressively 0.5)
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-z"))

;; TODO: Improve scrolling
(setq fast-but-imprecise-scrolling t)
;; (setq jit-lock-defer-time 0.1)
;; (setq redisplay-skip-fontification-on-input t)
;; Enable jit-lock-stealth-time for background fontification
;; (setq jit-lock-stealth-time 1)
;; (setq jit-lock-stealth-nice 0.5)
;; (setq jit-lock-chunk-size 100000000)

;; Increase read buffer size
(setq read-buffer-size (* 8 1024 1024 1024))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)

  ;; Set window size
  (setq default-frame-alist
      '((width . 209)
        (height . 79))))

;; Handle large file
;; Enable so-long mode globally (built into Emacs 27+)
;; (global-so-long-mode 1)

(defun le/setup-large-file-handling-high-mem ()
  "Configure settings for better large file handling in Emacs on
 systems with large RAM."

  (setq-default
   ;; Increase read-process-output-max to 8MB for better performance
   read-process-output-max (* 8 1024 1024)

   ;; 1GB
   gc-cons-threshold (* 10 1024 1024 )

   ;; Increase large-file-warning-threshold to 100MB
   large-file-warning-threshold (* 100 1024 1024 )

   ;; Increase undo limits
   undo-limit (* 4 1024 1024)
   undo-strong-limit (* 6 1024 1024)
   undo-outer-limit (* 12 1024 1024)

   read-process-output-max (* 16 1024 1024)) ; 16MB


   ;; Configure literal mode for very large files
   ;; (setq-default literal-mode-threshold (* 1 1024 1024))

   ;; Settings for vlf (Very Large Files) mode
   (use-package vlf
     :ensure t
     :config
     (require 'vlf-setup)
     (setq vlf-batch-size (* 16 1024 1024)))

   ;; Configure file-name-handler-alist to ignore certain operations
   (let ((file-name-handler-alist nil)))

   (defun le/disable-undo-in-large-buffers ()
     "Disable undo only for extremely large buffers"
     (when (> (buffer-size) (* 500 1024 1024)) ; 500MB
       (buffer-disable-undo)))
   (add-hook 'find-file-hook 'le/disable-undo-in-large-buffers)

   (defun le/disable-minor-modes-for-large-files ()
     "Disable various minor modes for large files"
     (when (> (buffer-size) (* 100 1024 1024)) ; 100MB
       (font-lock-mode -1)
       (line-number-mode -1)
       (flycheck-mode -1)
       (linum-mode -1)
       (company-quickhelp-mode -1)
       (company-quickhelp-local-mode -1)
       (emojify-mode -1)
       (company-mode -1)
       (company-box -1)
       (company-qickhelp-mode -1)
       (company-qickhelp-local-mode -1)
       (global-emojify-mode -1)
       (global-font-lock-mode -1)
       (global-git-commit-mode -1)
       (global-org-modern-mode -1)
       (line-number-mode -1)
       (show-paren-mode -1)
       (tooltip-mode -1)
       (transient-mark-mode -1)
       (column-number-mode -1)
       (display-line-numbers-mode -1)))
   (add-hook 'find-file-hook 'le/disable-minor-modes-for-large-files)

   ;; Enable jit-lock-stealth-time for background fontification
   (setq jit-lock-stealth-time 1)
   (setq jit-lock-stealth-nice 0.5)
   (setq jit-lock-chunk-size 100000)

   ;; Increase read buffer size
   (setq read-buffer-size (* 8 1024 1024)))

;; Initialize the configuration
;; (le/setup-large-file-handling-high-mem)

;; Additional settings for specific file types
(add-to-list 'auto-mode-alist '("\\.log\\'" . fundamental-mode))
(add-to-list 'auto-mode-alist '("\\.sql\\'" . fundamental-mode))
(add-to-list 'auto-mode-alist '("\\.odt\\'" . docview-mode))

;; prog-mode settings and hooks
(defun le/my-prog-mode-settings ()
  (display-line-numbers-mode)
  ;; (hl-line-mode)
  (hs-minor-mode) ;; hideshow
  (outline-minor-mode)
  (setq auto-fill-mode 0)
  (setq toggle-word-wrap 1)
  (setq fill-column 160)
  (setq display-fill-column-indicator 1)
  (setq display-fill-column-indicator-column 80)
  (setq indent-tabs-mode nil)
  (setq tab-width 4)
  (setq show-trailing-whitespace t)
  (setq whitespace-style '(face
                         tabs spaces trailing lines space-before-tab newline
                         indentation empty space-after-tab
                         space-mark tab-mark
                         missing-newline-at-eof))
  (local-set-key (kbd "C-c C-c") 'compile))

(add-hook 'prog-mode-hook 'le/my-prog-mode-settings)
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode t)
(add-hook 'emacs-lisp-mode-hook (lambda () (yas-minor-mode -1)))

;; text-mode settings and hooks
(defun le/my-text-mode-settings ()
  (setq-local show-trailing-whitespace nil)
  (visual-line-mode)
  (setq fill-column 220)
  (setq sentence-end-double-space nil)
  (flyspell-mode)
  (setq show-trailing-whitespace t)
  (setq whitespace-style '(face
                         tabs spaces trailing lines space-before-tab newline
                         indentation empty space-after-tab
                         space-mark tab-mark
                         missing-newline-at-eof))
  (local-set-key (kbd "C-c C-w") 'count-words))

(add-hook 'text-mode-hook 'le/my-text-mode-settings)

(setq ispell-dictionary "english")
(setq ispell-silently-savep t)
(setq ispell-personal-dictionary (expand-file-name "~/.ispell_english"))

(if (string-equal system-type "gnu/linux")
    (if (le/monitor-name-is-eDP-1)
        (setq my-default-font-height 150)
      (setq my-default-font-height 100))
    (setq my-default-font-height 108))

;; Set fonts
;;;
(set-face-attribute 'default nil
                    :height my-default-font-height
                    :foundry "ADBO"
                    :family "Source Code Pro")
(set-face-attribute 'fixed-pitch nil
                    :height my-default-font-height
                    :foundry "ADBO"
                    :family "Source Code Pro")


(set-face-attribute 'variable-pitch nil
                    :family "Atkinson Hyperlegible"
                    :height 1.28)

(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ))

(setq package-archive-priorities
      '(("gnu" . 30)
        ("melpa-stable" . 20)
        ("melpa" . 40)))

(package-initialize)
(package-refresh-contents)
(package-install 'quelpa)
(require 'use-package-ensure)
(require 'quelpa-use-package)

;; Misc configs
(delete-selection-mode 1)
(require 'recentf)
(recentf-mode t)
(setq recentf-max-menu-items 50)
(setq recentf-max-saved-items 50)
(run-at-time nil (* 5 60) 'recentf-save-list)

;; ffap
(require 'ffap)
(ffap-bindings)

;; ----------------------------------------------------------------
;; ffap enhancements to open file:line:column or file:line:function
;; ----------------------------------------------------------------

(defvar ffap-file-at-point-line-number nil
  "Variable to hold line number from the last `ffap-file-at-point' call.")

(defvar ffap-file-at-point-column-number nil
  "Variable to hold column number from the last `ffap-file-at-point' call.")

(defvar ffap-file-at-point-function-name nil
  "Variable to hold function name from the last `ffap-file-at-point' call.")

;; Helper function to find a test function definition
(defun ffap-find-function-definition (filename function-name)
  "Find the definition of FUNCTION-NAME in FILENAME."
  (when (and filename function-name)
    (with-current-buffer (find-file-noselect filename)
      (save-excursion
        (goto-char (point-min))
        ;; Look for "def test_function_name" pattern
        (if (re-search-forward (format "^\\s-*def\\s-+%s\\s-*(" function-name) nil t)
            (line-number-at-pos)
          nil)))))

(defadvice ffap-file-at-point (after ffap-store-line-column-number activate)
  "Search `ffap-string-at-point' for file patterns and store line/column/function numbers."
  (let* ((string (ffap-string-at-point))
         (name (or (condition-case nil
                       (and (not (string-match "//" string)) ; Avoid URLs like http://
                            (substitute-in-file-name string))
                     (error nil))
                   string))
         ;; Standard patterns for line:column
         (line-col-match (string-match ":\\([0-9]+\\):\\([0-9]+\\)" name))
         (line-match (string-match ":\\([0-9]+\\)\\(:\\|$\\)" name))
         ;; Improved pytest pattern to extract function name
         (pytest-match (string-match "\\([^[:space:]]+\\.py\\)::\\([^[:space:]]+\\)" name))
         line-number column-number file-path function-name)

    ;; Extract paths and position info based on pattern matches
    (cond
     ;; Handle pytest output format
     (pytest-match
      (setq file-path (match-string 1 name)
            function-name (match-string 2 name))
      ;; Check if we're in a pytest output line or similar context
      (save-excursion
        (let ((line (buffer-substring-no-properties
                     (line-beginning-position) (line-end-position))))
          ;; Check if we're in a pytest output line
          (when (string-match "FAILED\\|ERROR\\|test_" line)
            ;; Override the ffap results with our extracted path
            (setq ad-return-value file-path)
            ;; Store the function name for later use
            (setq ffap-file-at-point-function-name function-name)))))

     ;; Handle line:column format
     (line-col-match
      (setq line-number (string-to-number (match-string 1 name))
            column-number (string-to-number (match-string 2 name))))

     ;; Handle line only format
     (line-match
      (setq line-number (string-to-number (match-string 1 name)))))

    ;; Set the variables if we found valid numbers
    (if (and line-number (> line-number 0))
        (setq ffap-file-at-point-line-number line-number)
      (setq ffap-file-at-point-line-number nil))

    (if (and column-number (> column-number 0))
        (setq ffap-file-at-point-column-number column-number)
      (setq ffap-file-at-point-column-number nil))))

(defadvice find-file-at-point (after ffap-goto-line-column-function activate)
  "If line/column numbers or function name were found, jump to that position."
  (cond
   ;; If we have a function name, find and jump to it
   (ffap-file-at-point-function-name
    (let ((line-num (ffap-find-function-definition
                     (buffer-file-name)
                     ffap-file-at-point-function-name)))
      (when line-num
        (goto-char (point-min))
        (forward-line (1- line-num)))
      (setq ffap-file-at-point-function-name nil)))

   ;; Otherwise use line/column numbers if available
   (ffap-file-at-point-line-number
    (goto-char (point-min))
    (forward-line (1- ffap-file-at-point-line-number))
    (when ffap-file-at-point-column-number
      (move-to-column (1- ffap-file-at-point-column-number)))
    (setq ffap-file-at-point-line-number nil
          ffap-file-at-point-column-number nil))))

;; todo: fix this
;; (global-set-key "\C-x\ \C-r" 'fzf-recentf)
(global-set-key "\C-x\ \C-r" 'recentf-open)
(global-set-key "\C-x\ \C-y" 'find-file-read-only)
(global-set-key "\C-x\ \P" 'check-parens)
(setq-default indent-tabs-mode nil)

(setq explicit-shell-file-name "/bin/bash")
(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

;; Only vailable in emacs 29.1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (setq auto-save-visited-predicate          ;;
;;       (lambda () (eq major-mode 'org-mode) ;;
;;         auto-save-visited-interval 5))     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun le/my-c-mode-hook ()
  "This hook define hooks for 'c-mode'."
  (setq indent-tabs-mode nil))

(add-hook 'c-mode-hook 'le/my-c-mode-hook)
(set-scroll-bar-mode nil)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq use-dialog-box nil)

;; Start emacs server
(if (display-graphic-p)
    '(server-mode t))
(require 'server)
(unless (server-running-p)
  (server-start))

(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
(global-set-key (read-kbd-macro "M-S-<left>") 'windmove-swap-states-left)
(global-set-key (read-kbd-macro "M-S-<right>") 'windmove-swap-states-right)
(global-set-key (read-kbd-macro "M-S-<up>") 'windmove-swap-states-up)
(global-set-key (read-kbd-macro "M-S-<down>") 'windmove-swap-states-down)
;; (global-set-key (read-kbd-macro "C-x f") 'find-file-at-point)

;; Setup keybinding for eww
(defun le/my-eww-config ()
  "For use in `eww-mode-hook'."
  (local-set-key (kbd "^") #'eww-back-url))

(when (fboundp 'eww-mode)
  (add-hook 'eww-mode-hook 'le/my-eww-config))

(setq inhibit-startup-screen t)
(setq display-time-day-and-date t)
(display-time-mode t)

(setq mouse-wheel-scroll-amount '(0.01))
(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
(setq completion-cycle-threshold t)

;; Web search Jamaica
(defun le/search-web (text)
  "Search the web for TEXT using your default browser."
  (interactive
   (list (if (use-region-p)
             (buffer-substring (region-beginning) (region-end))
           (thing-at-point 'word t))))
  (browse-url
   (concat "https://www.google.com/search?q="
           (url-encode-url text))))

;; Bind it to a key of your choice, for example C-c s
(global-set-key (kbd "C-c s") 'le/search-web)

(use-package help
  :bind
  (:map help-mode-map
        ("^" . help-go-back)))

(use-package whitespace
  :ensure nil
  :config
  (setq whitespace-style '(face
                           tabs spaces trailing lines space-before-tab newline
                           indentation empty space-after-tab
                           space-mark tab-mark
                           missing-newline-at-eof)))

(use-package whitespace-cleanup-mode
  :ensure t
  :after whitespace
  :bind
  ("C-c C" . whitespace-cleanup)
  :init (setq whitespace-cleanup-mode-ignore-modes '(special-mode))
  :hook ((prog-mode . whitespace-cleanup-mode)
         (org-mode . whitespace-cleanup-mode)))

(use-package paren
  :ensure nil
  :init
  (setq show-paren-delay 1)
  (setq show-paren-style 'mixed)
  (setq show-paren-context-when-offscreen t)
  :config
  (show-paren-mode 1))


(use-package eldoc
  :ensure nil
  :diminish
  :disabled
  :hook
  ((emacs-lisp-mode . eldoc-mode)
   (lisp-interaction-mode . eldoc-mode)
   (ielm-mode . eldoc-mode))
  :config
  (setq eldoc-idle-delay 5)
  (setq eldoc-echo-area-use-multiline-p t))

;; (use-package elisp-eldoc
;;   :ensure nil
;;   :hook (emacs-lisp-mode . elisp-eldoc-enable))

;; (use-package eldoc-box
;;   :ensure t
;;   :hook (emacs-lisp-mode . eldoc-box-hover-at-point-mode)
;;   :config
;;   (setq eldoc-box-clear-with-C-g t))

(use-package electric
  :ensure nil
  :init
  (electric-pair-mode 1)
  :config
  (add-to-list 'electric-pair-pairs '(?` . ?`))
  (setq electric-pair-preserve-balance nil
        electric-pair-delete-adjacent-pairs t
        electric-pair-open-newline-between-pairs nil))

(use-package yasnippet
  :ensure t
  :init
  (add-to-list 'load-path "~/.emacs.d/elpa/yasnippet-20250403.1926")
  (require 'yasnippet)
  (setq yas-snippet-dirs '("~/git/contrib/yasnippet-snippets/snippets/")
        yas-wrap-around-region t
        yas-triggers-in-field t
        yas/triggers-in-field t)
  :bind
  ("M-/" . hippie-expand)
  :config
  (yas-global-mode 1)
  (yas-reload-all)
  (add-to-list 'hippie-expand-try-functions-list 'yas-hippie-try-expand))

(setq display-buffer-alist
      '(
        ("\\*\\(term\\|vterm\\|[eE]?shell\\)\\*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (slot . -1))
        ("\\*\\([Hh]elp.*\\|[Ii]nfo\\|.*[Ff]inder.*\\|Apropos\\)\\*"
         ;; todo - have matched buffers use the same window
         (display-buffer-reuse-mode-window
          ;; display-buffer-use-some-window
          display-buffer-in-direction)
         (mode . '(help-mode Info-mode))
         (window . root)
         (direction . right)
         (window-width . 0.48))
        ("\\*\\(ChatGPT\\|Ollama\\)\\*"
         (display-buffer-reuse-mode-window
          display-buffer-in-direction)
         (mode . '(help-mode Info-mode))
         (window . root)
         (direction . right)
         (window-width . 0.48))
        ("\\*\\(Flycheck errors\\|python-black errors\\|Backtrace\\)\\*"
         (display-buffer-in-side-window)
         (window-height . 0.2)
         (side . bottom)
         (slot . 0))
        ("\\*Org todo\\*"
         (display-buffer-at-bottom)
         (window-height . 0.3))
        ))


;; ------------------------------- feature/info-side-windows -------------------------------


(defvar my-info-buffer-font-spec '(:family "Liberation Mono" :height 90)
  "Font specification for the custom info buffers.
Height is in 1/10th of a point, so 90 means 9.0 points.")

(defun my-set-info-buffer-font ()
  "Set buffer-local font for custom info buffers using `my-info-buffer-font-spec`."
  (face-remap-add-relative 'default my-info-buffer-font-spec))

;; General helper function to toggle an information buffer
(defun my-toggle-info-buffer (buffer-name content-fn)
  "Toggle the display of a buffer named BUFFER-NAME.
If the buffer is currently visible in any window, kill the buffer.
Otherwise, create/recreate the buffer, populate it using CONTENT-FN,
set it to special-mode, apply custom font, and display it.
CONTENT-FN is responsible for the buffer's content and its read-only state."
  (let ((buffer (get-buffer buffer-name)))
    (if (and buffer (get-buffer-window buffer 'visible)) ; 'visible checks current frame
        ;; Buffer is visible, so kill it
        (progn
          (message "Closing buffer: %s" buffer-name)
          (kill-buffer buffer))
      ;; Buffer not visible or doesn't exist, so create/show it
      (progn
        (message "Opening buffer: %s" buffer-name)
        (setq buffer (get-buffer-create buffer-name))
        (with-current-buffer buffer
          (let ((inhibit-read-only t)) ; Allow modifications during setup
            (erase-buffer)
            (special-mode)             ; Set a general-purpose mode
            (my-set-info-buffer-font)  ; <<--- APPLY CUSTOM FONT HERE
            ;; Call the content function to populate the buffer
            (funcall content-fn)
            (goto-char (point-min)))) ; Go to the beginning of the buffer
        (display-buffer buffer)))))   ; Let display-buffer-alist handle window placement

;; --- 1. Journalctl Output Feature ---

(defvar my-journalctl-buffer-name "*MyJournalOutput*"
  "Name of the buffer to display journalctl output.")

(defun my-insert-journalctl-output ()
  "Clear the current buffer and insert `sudo journalctl` output asynchronously.
The buffer is made read-only once the command completes."
  ;; This function is called within (with-current-buffer ...) by my-toggle-info-buffer
  ;; inhibit-read-only is also active from the caller.
  (let ((command "SYSTEMD_COLORS=false sudo journalctl -f --no-hostname --no-pager --output=cat")
        (output-buffer (current-buffer)))
    (insert (format "Running '%s'...\nThis may require sudo privileges.\n\n" command))
    (set-buffer-modified-p nil) ; Mark as not modified initially

    ;; Start the asynchronous shell command
    (let ((process (async-shell-command command output-buffer)))
      (set_process_sentinel process
        (lambda (proc _event-string) ; _event-string describes how process ended
          ;; Check if the process has actually finished
          (when (memq (process-status proc) '(exit signal))
            (with-current-buffer (process-buffer proc) ; Ensure actions are in the output buffer
              (setq buffer-read-only t)
              (goto-char (point-min))
              (message "Journalctl output updated in %s. Buffer is now read-only." (buffer-name output-buffer)))))))
    ;; IMPORTANT: The buffer will become writable by async-shell-command.
    ;; The sentinel ensures it's set back to read-only when the process finishes.
    ))

(defun my-toggle-journalctl-window ()
  "Toggle the display of journalctl output in a side window."
  (interactive)
  (my-toggle-info-buffer my-journalctl-buffer-name #'my-insert-journalctl-output))

;; (defun my-toggle-journalctl-window ()
;;   "Toggle the display of journalctl output in a side window."
;;   (interactive)
;;   ;; Temporarily use the test content function:
;;   (my-toggle-info-buffer my-journalctl-buffer-name #'my-insert-journalctl-output-TEST))

;; --- 2. Read-only copy of another buffer ---

(defvar my-copied-content-buffer-name "*MyCopiedBuffer*"
  "Name of the buffer to display read-only content from another buffer.")

;; This variable will store the *name* of the buffer to copy from.
(defvar my-source-buffer-for-copy nil
  "Name of the buffer whose content was last copied.")

(defun my-insert-copied-buffer-content ()
  "Clear the current buffer and insert content from `my-source-buffer-for-copy`
WITHOUT its original text properties.
The buffer is made read-only after insertion."
  (if (not my-source-buffer-for-copy)
      (insert "Error: No source buffer specified for copying.\nUse M-x my-toggle-copied-buffer-window to specify one.")
    (let ((source-buf-object (get-buffer my-source-buffer-for-copy)))
      (if (not source-buf-object)
          (insert (format "Error: Source buffer '%s' no longer exists." my-source-buffer-for-copy))
        (progn
          (insert (format "Snapshot of buffer: %s (Read-only)\n" (buffer-name source-buf-object)))
          (insert "-------------------------------------------------\n")
          ;; Insert content without properties to ensure local font is used
          (let ((text-to-insert (with-current-buffer source-buf-object
                                  (buffer-substring-no-properties (point-min) (point-max)))))
            (insert text-to-insert))
          (insert "\n-------------------------------------------------\n")
          (setq buffer-read-only t))))))

(defun my-toggle-copied-buffer-window ()
  "Toggle the display of another buffer's content in a read-only side window.
If the side window is being created, it prompts for the source buffer."
  (interactive)
  ;; Determine if we are about to create/show the buffer (i.e., it's not currently visible)
  (let ((creating-or-showing (not (get-buffer-window my-copied-content-buffer-name 'visible))))
    (when creating-or-showing
      ;; Prompt for the source buffer only when initially creating/showing.
      (let* ((history-var 'my-source-buffer-for-copy-history) ; For read-buffer history
             (default-source-buffer
              (if my-source-buffer-for-copy
                  (get-buffer my-source-buffer-for-copy)
                (other-buffer (current-buffer) 'visible)))) ; Suggest current or other visible buffer
        (setq my-source-buffer-for-copy
              (read-buffer "Copy content from buffer: "
                           (if default-source-buffer (buffer-name default-source-buffer) nil)
                           t ; require-match: yes, buffer must exist
                           )))))
  ;; Now call the generic toggle function
  (my-toggle-info-buffer my-copied-content-buffer-name #'my-insert-copied-buffer-content))

;; --- Configuration for display-buffer-alist ---
;; Add this to your Emacs configuration (e.g., init.el)
;; This tells Emacs how to display these new buffers.

(add-to-list 'display-buffer-alist
             '("\\*\\(MyJournalOutput\\|MyCopiedBuffer\\)\\*" ; Regex to match buffer names
               (display-buffer-reuse-mode-window display-buffer-in-direction)
               (mode . special-mode) ; Match the mode we set in my-toggle-info-buffer
               ;; (window . root)       ; Relative to the whole frame
               (direction . right)   ; Place it on the right side
               (window-width . 0.48) ; Match your existing right-side window width, or adjust
               (side . bottom)
               (slot . 0)
               ;; (reusable-frames . visible) ; Standard practice
              ) t) ; 't' appends this rule to the list

;; --- Example Keybindings ---
;; You can set these to whatever you prefer.
(global-set-key (kbd "C-c j") #'my-toggle-journalctl-window)
(global-set-key (kbd "C-c b") #'my-toggle-copied-buffer-window) ; Example: C-c (then) c (then) b

;; ------------------------------- feature/info-side-windows -------------------------------


(defun le/my-find-file-symlink-target ()
  "Follow symlinks for specific files, avoiding the VC prompt."
  (let ((filename (file-name-nondirectory (buffer-file-name))))
    (when (or (equal filename ".emacs")
              (equal filename ".bashrc"))
      (setq vc-follow-symlinks t))))

(add-hook 'find-file-hook 'le/my-find-file-symlink-target)

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

;; Tramp configuration
(customize-set-variable 'tramp-use-ssh-controlmaster-options 'suppress)
(customize-set-variable 'tramp-default-method "ssh")
;; (customize-set-variable 'tramp-verbose 6 "Enable remote command traces")

;; Setup Dired Git integration
(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))

;; Setup dired-single
;; (use-package dired-single
;;   :ensure t)

;; (require 'dired-single)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-matching-paren t)
 '(centaur-tabs-bar-height 22)
 '(column-number-mode 1)
 '(custom-safe-themes
   '("f64189544da6f16bab285747d04a92bd57c7e7813d8c24c30f382f087d460a33" "443e2c3c4dd44510f0ea8247b438e834188dc1c6fb80785d83ad3628eadf9294"
     "adaf421037f4ae6725aa9f5654a2ed49e2cd2765f71e19a7d26a454491b486eb" "60ada0ff6b91687f1a04cc17ad04119e59a7542644c7c59fc135909499400ab8"
     "0c08a5c3c2a72e3ca806a29302ef942335292a80c2934c1123e8c732bb2ddd77" "ce4234c32262924c1d2f43e6b61312634938777071f1129c7cde3ebd4a3028da"
     "b54376ec363568656d54578d28b95382854f62b74c32077821fdfd604268616a" "1aa4243143f6c9f2a51ff173221f4fd23a1719f4194df6cef8878e75d349613d"
     "eca44f32ae038d7a50ce9c00693b8986f4ab625d5f2b4485e20f22c47f2634ae" "6945dadc749ac5cbd47012cad836f92aea9ebec9f504d32fe89a956260773ca4"
     "636b135e4b7c86ac41375da39ade929e2bd6439de8901f53f88fde7dd5ac3561" "2721b06afaf1769ef63f942bf3e977f208f517b187f2526f0e57c1bd4a000350" default))
 '(frame-background-mode nil)
 '(imenu-auto-rescan t)
 '(magit-bury-buffer-function 'magit-restore-window-configuration)
 '(org-agenda-files '("~/git/personal/notes/agenda/notes.org"))
 '(package-selected-packages
   '(all-the-icons anki-editor atomic-chrome blacken centaur-tabs company-box company-quickhelp consult-flycheck consult-gh-forge consult-lsp consult-org-roam
                   consult-projectile consult-yasnippet copilot corfu dashboard demap diff-hl dockerfile-mode doom-modeline doom-themes dumb-jump emojify
                   eterm-256color expand-region flycheck-posframe flyspell-correct fzf google-this gptel groovy-mode helpful highlight-indent-guides
                   ibuffer-projectile idle-highlight-mode imenu-list jinja2-mode k8s-mode latex-preview-pane lsp-pyright lsp-treemacs lsp-ui marginalia
                   mermaid-mode multi-vterm multiple-cursors nerd-icons-completion nerd-icons-dired nerd-icons-ibuffer orderless org-download org-make-toc
                   org-modern org-noter org-preview-html org-projectile org-roam-ql org-roam-ui ox-hugo pdf-tools py-isort python-mode pyvenv quelpa-use-package
                   rainbow-mode systemd terraform-mode textile-mode treemacs-magit treemacs-nerd-icons treemacs-projectile vertico-posframe visual-fill-column
                   whitespace-cleanup-mode yasnippet yasnippet-snippets))
 '(tramp-default-method "ssh")
 '(warning-suppress-types '((lsp-mode) (comp)))
 '(window-divider-default-right-width 2)
 '(window-divider-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-bright-black ((t (:background "#222D32" :foreground "dark gray"))))
 '(bold ((t (:weight extra-bold))))
 '(centaur-tabs-active-bar-face ((t (:background "#506165"))))
 '(centaur-tabs-default ((t (:background "dark slate gray" :foreground "white"))))
 '(copilot-overlay-face ((t (:foreground "pale violet red"))))
 '(cursor ((t (:background "#c792ea"))))
 '(custom-comment ((t (:background "#171F24" :foreground "#EEFFFF"))))
 '(custom-comment-tag ((t (:foreground "dark gray"))))
 '(doom-modeline-buffer-file ((t (:foreground "white"))))
 '(doom-modeline-icon ((t (:foreground "white"))))
 '(doom-themes-treemacs-root-face ((t (:inherit font-lock-string-face :height 0.85))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "light gray"))))
 '(font-lock-comment-face ((t (:foreground "gray"))))
 '(font-lock-doc-face ((t (:inherit font-lock-comment-face :foreground "gray"))))
 '(fringe ((t (:inherit default :foreground "medium aquamarine"))))
 '(highlight ((t (:background "#c792ea" :foreground "#5b5a68"))))
 '(highlight-symbol-face ((t (:background "#5a5400"))))
 '(hl-line ((t (:extend t :background "#2a404c"))))
 '(horizontal-border ((t (:weight thin :background "#364248" :foreground "#364248"))))
 '(ido-only-match ((t (:foreground "SpringGreen3"))))
 '(line-number ((t (:foreground "gray"))))
 '(line-number-current-line ((t (:foreground "white"))))
 '(lsp-face-highlight-textual ((t (:background "#564e6d" :foreground "#ACB4B8" :weight bold))))
 '(mode-line ((t (:background "#093159" :foreground "#dde4eb" :box nil))))
 '(mode-line-inactive ((t (:background "#394c55" :foreground "#a4aeba" :box nil))))
 '(nerd-icons-orange ((t (:foreground "steel blue"))))
 '(org-agenda-dimmed-todo-face ((t (:foreground "dark gray"))))
 '(org-block ((t (:inherit fixed-pitch :height 0.9))))
 '(org-code ((t (:inherit fixed-pitch))))
 '(org-drawer ((t (:foreground "SlateGray4" :weight light :height 0.8))))
 '(org-headline-done ((t (:foreground "gray"))))
 '(org-document-info ((t (:height 1.0))))
 '(org-document-info-keyword ((t (:foreground "SlateGray4" :weight light :height 1.0))))

 ;; Place this within your :custom-set-faces section in your init.el
 '(org-document-title ((t (:foreground "#a3C3E3" :weight bold :height 1.7))))      ;; Main Accent Blue
 '(org-level-1 ((t (:inherit outline-1 :foreground "#81A1C1" :weight bold :height 1.45)))) ;; Soft Slate Blue
 '(org-level-2 ((t (:inherit outline-2 :foreground "#81A1C1" :weight bold :height 1.3))))  ;; Muted Cadet Blue
 '(org-level-3 ((t (:inherit outline-3 :foreground "#6b88a5" :weight bold :height 1.2))))  ;; Dark Blue-Gray
 '(org-level-4 ((t (:inherit outline-4 :foreground "#6b88a5" :weight normal :height 1.1)))) ;; Dark Blue-Gray (Normal Weight)
 '(org-level-5 ((t (:inherit outline-5 :foreground "#546e7a" :weight normal :height 1.1)))) ;; Dark Blue-Gray (Normal Weight)

 ;; --- Optional but Recommended Adjustments for Consistency ---

 ;; A more muted ellipsis that fits the monochrome theme
 '(org-ellipsis ((t (:background unspecified :foreground "#546e7a" :weight semi-bold :height 0.9 :underline unspecified))))

 ;; Make the org-modern bullets match the Level 2 color for harmony
 '(org-modern-bullet ((t (:foreground "#6b88a5"))))

 '(org-meta-line ((t (:foreground "SlateGray4" :weight light :height 1.0))))
 '(org-modern-block-name ((t (:weight semi-light :height 0.8))))
 '(org-modern-label ((t (:box t (:line-width (0 . -3) :color "#263238") :underline nil :weight extra-bold :height 0.95 :width condensed))))
 '(org-modern-todo ((t (:inherit (org-todo org-modern-label) :inverse-video t :underline nil :weight extra-bold :height 0.95 :width condensed))))
 '(org-property-value ((t (:foreground "SlateGray3" :weight light :height 0.8))))
 '(org-scheduled-today ((t (:foreground "dark gray"))))
 '(org-special-keyword ((t (:foreground "SlateGray3" :weight light :height 0.8))))
 '(org-table ((t (:inherit fixed-pitch :height 0.8))))
 '(org-tag ((t (:foreground "cyan3" :weight normal))))
 '(org-time-grid ((t (:foreground "gray80"))))
 '(org-upcoming-distant-deadline ((t (:foreground "red1"))))
 '(org-verbatim ((t (:inherit fixed-pitch))))
 '(region ((t (:extend t :background "IndianRed4"))))
 '(shadow ((t (:foreground "rosy brown"))))
 '(show-paren-match ((t (:background "dim gray" :foreground "cyan" :weight ultra-bold))))
 '(symbol-overlay-default-face ((t (:background "#19546c" :foreground "#e9f1f1"))))
 '(treemacs-root-face ((t (:inherit font-lock-string-face :weight bold :height 1.0))))
 '(treemacs-window-background-face ((t (:inherit default :background "#293539"))))
 '(vertical-border ((t (:background "#394549" :foreground "#394549")))))


;; Misc
(use-package hideshow
  :bind
  (:map prog-mode-map
        ("C-+" . hs-toggle-hiding)))

(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package nerd-icons
  :ensure t
  :custom
  (nerd-icons--cache-limit 4096)
  (nerd-icons-font-family "SauceCodePro Nerd Font"))

;; ========== Developer configurations ===========
(use-package fzf
  :ensure t
  :pin melpa
  :bind
    ;; TODO(slams): set keybinds
  :config
  (setq fzf/args "-x --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        fzf/grep-command "rg --no-heading -nH"
        ;; fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom nil
        fzf/window-height 15))

(use-package dumb-jump
  :ensure t)
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)

;; (use-package rg
;;   :ensure t)
;; (rg-enable-default-bindings)

(use-package highlight-indent-guides
  :ensure t
  ;; :hook  (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'bitmap
        highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line))

;; (use-package highlight-symbol
;;   :ensure t
;;   :config
;;   (setf highlight-symbol-idle-delay 0)
;;   :bind (("M-s" . highlight-symbol-at-point)
;;          ("M-S" . highlight-symbol-remove-all)))


;; (defvar my-fringe-symbol "-")
;; (defun my-idle-highlight-fringe-symbol ()
;;   (message "Reached my-idle-highlight-fringe-symbol")
;;   (let ((symbol (if (and (boundp 'idle-highlight-symbol)
;;                          idle-highlight-symbol)
;;                     idle-highlight-symbol
;;                   (thing-at-point 'symbol))))
;;     (if (and (boundp 'idle-highlight-mode) idle-highlight-mode symbol)
;;         (set-fringe-style (list my-fringe-symbol fringe-width))
;;       (set-fringe-style (list nil nil)))
;;     ))

;; (add-hook 'idle-highlight-idle-hook 'my-idle-highlight-fringe-symbol)
;; (add-hook 'idle-highlight-mode-hook 'my-idle-highlight-fringe-symbol)

(use-package idle-highlight-mode
  :ensure t
  :config (setq idle-highlight-idle-time 1))

(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))

(use-package multiple-cursors
  :ensure t
  :bind (("C->" . mc/mark-next-like-this-symbol)
         ("C-<" . mc/mark-previous-like-this-symbol)
         ("C-x m" . mc/mark-all-symbols-like-this)
         ("C-x S-m" . mc/mark-all-dwim)))

(use-package imenu-list
  :ensure t
  :bind ("C-." . imenu-list-minor-mode)
  :config
  (setq imenu-list-focus-after-activation nil))
(global-set-key (kbd "C-'") #'imenu-list-smart-toggle)

;; (use-package imenu-anywhere
;;   :ensure t
;;   :bind (("C-." . ido-imenu-anywhere)))

(use-package bicycle
  :after outline
  :bind (:map outline-minor-mode-map
              ([C-tab] . bicycle-cycle)
              ([S-tab] . bicycle-cycle-global)))

(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-x p" . projectile-command-map)
              :map projectile-command-map
              ("A" . projectile-add-known-project))
  :config
  (setq projectile-project-search-path '(("~/git" . 2)))
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action #'projectile-dired)
  (setq projectile-per-project-compilation-buffer t)
  (setq projectile-globally-ignored-buffers '("*scratch*" "*Messages*"
                                              "*Warnings*" "*Help*"
                                              "*Customize*" "*Echo*" "*vterm*"
                                              "*dashboard*" "*Org Agenda*"
                                              "*Calendar*" "*server*" "*gnus*"
                                              "*mm*" "*copilot*"))
  (projectile-discover-projects-in-search-path))

(use-package treemacs
  :ensure t
  :diminish
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 1 0)
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-display-current-project-exclusively t
          treemacs-indentation                     1
          treemacs-indentation-guide-mode          t
          treemacs-indentation-guide-style         'line
          treemacs-project-follow-mode             t
          treemacs-follow-after-init               t
          treemacs-width-is-initially-locked       nil
          treemacs-text-scale                      -1)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (setq treemacs-resize-icons 10)

    (treemacs-follow-mode t)
    (treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-nerd-icons
  :ensure t
  :after treemacs nerd-icons all-the-icons
  :config
  (treemacs-load-theme "nerd-icons")
  (treemacs-refresh))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package json
  :ensure t
  :config
  (add-hook 'json-mode-hook 'json-mode))

;; ======= Language configuration ============
(add-to-list `auto-mode-alist '("\\.svg\\'" . nxml-mode))

(use-package python-mode
  :ensure t
  :hook ((prog-mode . (lambda ()
                        (setq toggle-word-wrap 0)
                        (setq fill-column 88)
                        (setq display-fill-column-indicator 1)
                        (setq display-fill-column-indicator-column 88)))))

(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter
                      (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

(use-package blacken
  :ensure t)

(use-package py-isort
  :ensure t)

(use-package groovy-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gvy$" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gy$" . groovy-mode))
  :config
  (setf (alist-get "Jenkinsfile.+$" auto-mode-alist) 'groovy-mode)
  (setq compile 'jenkins-lint))

(defvar yaml-formatting-enabled nil
  "Whether YAML formatting is currently enabled.")

(use-package yaml-mode
  :ensure t
  :hook
  ((yaml-mode . outline-minor-mode)
   (yaml-mode . display-line-numbers-mode)
   (yaml-mode . le/yaml-mode-setup)
   (yaml-mode . highlight-indent-guides-mode)
   ;; (yaml-mode . ansible-mode)
   (yaml-mode . (lambda ()
                  (add-hook 'after-save-hook 'le/yaml-frmt nil t)
                  )))
  :config
  (defvar yaml-formatting-enabled t)
  (setq fill-column 160)
  (defun toggle-yaml-formatting ()
    "Toggle the state of YAML formatting."
    (interactive)
    (setq yaml-formatting-enabled (not yaml-formatting-enabled))
    (message "YAML formatting %s" (if yaml-formatting-enabled "enabled" "disabled")))
  (defun le/yaml-frmt ()
    "Conditionally reformat YAML file with yq based on `yaml-formatting-enabled'."
    (interactive)
    (when (and yaml-formatting-enabled (eq major-mode 'yaml-mode))
      (shell-command-to-string (format "yq eval-all -i %s" buffer-file-name))
      (revert-buffer t t t)
      (message "YAML file reformatted.")))
  (defun le/yaml-mode-setup ()
    "Setup yaml mode"
    (setq hs-minor-mode -1)
    (setq-default display-fill-column-indicator-column 160)
    (require 'lsp)
    (lsp-deferred)))

(use-package terraform-mode
  :ensure t
  :bind (:map terraform-mode-map
              ("C-+" . hs-toggle-hiding))
  :config
  (defun frmt-hcl ()
    "Reformat HCL file with terraform fmt."
    (when (eq major-mode 'terraform-mode)
      (shell-command-to-string (format "terraform fmt %s" buffer-file-name))
      (auto-revert-mode)))
  (add-hook 'after-save-hook 'frmt-hcl)
  (add-hook 'terraform-mode-hook 'outline-minor-mode)
  ;; (add-hook 'terraform-mode-hook 'highlight-indent-guides-mode)
  ;; (add-hook 'terraform-mode-hook 'hs-minor-mode)
  (add-hook 'terraform-mode-hook 'display-line-numbers-mode))

(use-package markdown-mode
  :ensure t
  :bind (:map markdown-mode-map
              ("C-+" . hs-toggle-hiding))
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config
  (add-hook 'markdown-mode-hook 'outline-minor-mode)
  ;; (add-hook 'markdown-mode-hook 'highlight-indent-guides-mode)
  ;; (add-hook 'markdown-mode-hook 'hs-minor-mode)
  (add-hook 'markdown-mode-hook 'display-line-numbers-mode))

;; Linters and formatters
(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))

;; (with-eval-after-load 'flycheck
;;   (flycheck-grammarly-setup))
;; (setq flycheck-grammarly-check-time 1.0)

(use-package flycheck
  :ensure t
  ;; :init (global-flycheck-mode)
  :bind (("M-n" . flycheck-next-error)
         ("M-p" . flycheck-previous-error))
  :config (setq-default flycheck-checker-error-threshold 2048)
  ;; add a lambda for flycheck-rror-list-mode-hook
  (add-hook 'flycheck-error-list-mode-hook
            (lambda ()
              (setq tabulated-list-format '[("Line" 5 flycheck-error-list-entry-< :right-align t)
                                            ("Col" 3 nil :right-align t)
                                            ("Level" 8 flycheck-error-list-entry-level-<)
                                            ("ID" 20 t)
                                            (#("Message (Checker)" 0 9
                                               (face default)
                                               9 16
                                               (face flycheck-error-list-checker-name)
                                               16 17
                                               (face default))
                                             0 t)]))))

;;  :config (setq-default flycheck-disabled-checkers '(emacs-lisp)))

(use-package flycheck-posframe
  :ensure t
  :after flycheck
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
  (flycheck-posframe-configure-pretty-defaults)
  (setq flycheck-posframe-warning-prefix "\u26a0 ")
  (setq flycheck-posframe-error-prefix "\u26a0 "))

;; Productivity
(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo "copilot-emacs/copilot.el"
                   :branch "main"
                   :files ("*.el"))
  :ensure t
  :hook ((post-command-hook . copilot-clear-overlay))
         ;;(prog-mode . copilot-mode))
  :bind (("M-\\" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . copilot-clear-overlay)
         ("<ESC>" . copilot-clear-overlay)
         ("C-p" . copilot-previous-completion)
         ("C-n" . copilot-next-completion)
         ("<tab>" . copilot-accept-completion)
         ("[tab]" . copilot-accept-completion)
         ("C-w" . copilot-accept-completion-by-word)
         ("C-l" . copilot-accept-completion-by-line))
  :config
  (setq copilot-idle-delay .5)
  (setq copilot-max-chars 1000000)
  (setq copilot-indentation-alist nil)
  (setq copilot-indent-offset-warning-disable t)
  (add-to-list 'copilot-indentation-alist '(org-mode . 2)))

(use-package ibuffer-projectile
  :ensure t)


;; ibuffer
(use-package ibuffer
  :bind ("C-x C-b" . 'ibuffer)
  :hook (ibuffer-hook . (lambda ()
                          (ibuffer-projectile-set-filter-groups)
                          (unless (eq ibuffer-sorting-mode 'alphabetic)
                            (ibuffer-do-sort-by-alphabetic))))
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-expert t)
  (ibuffer-saved-filter-groups
   '(("default"
      ("Files"
       (or
        (mode . text-mode)
        (name . "^\\.*lisp$")
        (name . "^\\.*el$")
        (name . "^\\.*org$")))
      ("Org"
       (or
        (name . "^\\*Calendar\\*$")
        (name . "^\\*Org Agenda")
        (name . "^ \\*Agenda")
        (name . "^diary$")
        (mode . org-mode)))
      ("Dired" (mode . dired-mode))
      ("Python" (mode . python-mode))
      ("Go" (mode . go-mode))
      ("Dockerfile" (mode . dockerfile-mode))
      ("Shell Scripts" (mode . sh-mode))
      ("JavaScript" (mode . js-mode))
      ("Java" (mode . java-mode))
      ("Lisp"
       (or
        (mode . emacs-lisp-mode)
        (mode . lisp-mode)))
      ("Groovy" (mode . groovy-mode))
      ("Terraform" (mode . terraform-mode))
      ("Rust"
       (or
        (mode . rust-mode)
        (mode . cargo-mode)
        (name . "\\*Cargo")
        (name . "^\\*rls\\(::stderr\\)?\\*")
        (name . "eglot")))
      ("C++"
       (or
        (mode . c-mode)
        (mode . c++-mode)))
      ("Perl"
       (or (mode . cperl-mode)
           (mode . perl-mode)))

      ("Yaml" (mode . yaml-mode))
      ("JSON" (mode . json-mode))
      ("Markdown" (mode . markdown-mode))

      ("Shells"
       (or
        (mode . shell-mode)
        (mode . ansi-mode)
        (mode . eshell-mode)
        (mode . term-mode)
        (mode . compilation-mode)))


      ("Magit"
       (or
        (mode . magit-status-mode)
        (mode . magit-log-mode)
        (name . "\\*magit")
        (name . "magit-")
        (name . "git-monitor")))
      ("Scratch & Help"
       (or
        (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*Help$")
        (name . "^\\*Customize")))
      ("Processes"
       (or
        (name . "^\\*tramp/ssh.*")
        (name . "\\*git-monitor\\*")
        (mode . compilation-mode)
        (name . "^\\*Async Shell Command")
        (mode . term-mode)))
      ("GPTel Buffers" (name . "gpt"))
      ("LSP"
       (or
        (name . "^\\*lsp-log")
        (name . "^\\*pyright")
        (name . "^\\*code-con")))
      ("Misc"
       (or
        (name . "^\\*dashboard\\*$")
        (name . "^\\*which-key")
        (name . "^\\*pdf-info-")
        (name . "^\\*string-pixel")
        (name . "^\\*eldoc for ")
        (name . "^\\*code-con")))
      ("Gnus"
       (or
        (mode . message-mode)
        (mode . mail-mode)
        (mode . gnus-group-mode)
        (mode . gnus-summary-mode)
        (mode . gnus-article-mode)
        (name . "^\\.newsrc-dribble")
        (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
        (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
        (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
      ("Emacs"
       (or
        (name . "^\\*Echo")
        (name . "^\\*Minibuf-")
        (name . "^\\*quelpa")
        (name . "^\\*Async-native")
        ))
      )))
  (ibuffer-show-empty-filter-groups nil)
  ;; (ibuffer-shrink-to-minimum-size t t)
  (ibuffer-use-other-window nil)
  :config
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 24 20 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                project-relative-file)))
  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default"))))

(defun le/org-mode-visual-fill ()
  "Setup visual-fill-mode."
  (setq visual-fill-column-width 180
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :defer t
  :hook (org-mode . le/org-mode-visual-fill))

(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)

(defun le/what-face (pos)
  "Show the face at the current point (POS) in the minibuffer."
  (interactive "d")
  (let ((face (or (get-char-property pos 'read-face-name)
                  (get-char-property pos 'face))))
    (if face
        (message "Face: %s" face)
      (message "No face at %d" pos))))

(defun le/org-mode-return ()
  "Insert a new heading or continue list item on RET, depending on context."
  (interactive)
  (if (org-at-heading-p)
      (org-return)
    (let ((line-start (buffer-substring-no-properties
                       (line-beginning-position)
                       (line-end-position))))
      (cond
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) \\[ \\]" line-start) ; Checkbox items
        (org-insert-item t))
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) " line-start) ; Unordered list items
        (org-insert-item))
       ((string-match "^ *\\([0-9]+\\)\\(\\.\\|)\\) " line-start) ; Ordered list items
        (org-insert-item nil))
       ((string-match "^ *\\(\\-\\|\\+\\|\\*\\) .* :: " line-start) ; Term/Description
        (org-insert-item))
       (t
        (org-return))))))

(defun le/org-mode-basic-setup ()
  "Perform some basic non-org-mode configuration setup at hook execution."
  (variable-pitch-mode 1)
  (setq-local line-spacing 0.2)
  (auto-fill-mode 0)
  (visual-line-mode t)
  (setq-local show-trailing-whitespace nil)
  (setq-local hl-line-mode nil))

;; start of "use-package org" for the main org-mode section
(use-package org
  :defer t
  :pin gnu
  :init
  :hook
  (org-mode . le/org-mode-basic-setup)
  (org-mode . le/org-mode-visual-fill)
  :mode (("\\.org$" . org-mode))
  :custom
  (org-startup-indented t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  :config
  (add-hook 'org-mode-hook
          (lambda ()
            (setq-local yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)
            (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)))
  (setq org-capture-templates
        '(("t" "Tech Note" entry
           (file+headline "~/git/org-roam/inbox.org" "Tech Notes")
           "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")))
  (define-key org-mode-map (kbd "RET")  #'le/org-mode-return)
  (setq
   org-auto-align-tags t
   org-blank-before-new-entry '((heading . nil) (plain-list-item . nil))
   org-catch-invisible-edits 'show-and-error
   org-cycle-separator-lines 2
   org-fontify-quote-and-verse-blocks t
   org-hide-emphasis-markers t
   org-insert-heading-respect-content nil
   org-list-indent-offset 2
   org-log-repeat t
   org-pretty-entities t
   org-return-follows-link  t
   org-special-ctrl-a/e t
   org-support-shift-select nil
   org-startup-with-inline-images t
   org-image-actual-width nil
   org-image-max-width 300

   org-ellipsis "  🡇"
   org-clock-sound "~/.emacs.d/org/media/alarm.wav"
   ;; TODO keywords setup
   org-todo-keywords
   '((sequence "TODO(t)" "IN-PROGRESS(p)" "IN-REVIEW(r)" "WAITING(w)" "BLOCKED(b)" "WONT-DO(x)" "|" "DONE(d)" "DELEGATE(D)")
     (sequence "REPEAT(R)" "|" "DONE(d)"))

   ;; ("TODO" . (:background "#c3e88d" :foreground "white" :weight extra-bold))
   ;; TODO face setup;
   org-modern-todo-faces
   '(("IN-PROGRESS" . (:background "DarkOrange" :foreground "white" :weight extra-bold))
     ("REPEAT" . (:background "DarkViolet" :foreground "white" :weight extra-bold))
     ("IN-REVIEW" . (:background "RoyalBlue" :foreground "white" :weight extra-bold))
     ("WAITING" . (:background "DarkOrange3" :foreground "white" :weight extra-bold))
     ("BLOCKED" . (:background "red" :foreground "white" :weight extra-bold))
     ("WONT-DO" . (:background "plum" :foreground "black" :weight extra-bold))
     ("DELEGATE" . (:background "DimGrey" :foreground "white" :weight extra-bold))
     ("DONE" . (:background "DarkGreen" :foreground "white" :weight extra-bold)))

   org-tag-faces
   '(("pin" . (:foreground "red" :weight bold)))

   ;; Agenda styling
   org-agenda-tags-column -80
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────"
   )

  (setq org-modules
        '(org-habit
          org-bookmark))

  (setq org-refile-targets '((nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (setq org-replace-disputed-keys t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (makefile . t)
     (css . t)
     (eshell . t)
     (dot . t)
     (java . t)
     (js . t)
     (perl . t)
     (processing . t)
     (sql . t)
     (sqlite . t)
     (org . t)
     (shell . t)
     (C . t)
     (sed . t)))
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  ) ;; org-mode. End of "use-package org"

(use-package org-modern
  :ensure t
  :after org
  :custom
  (org-modern-hide-stars nil)
  (org-modern-hide-properties nil)
  (org-modern-property nil)
  (org-modern-keyword nil)
  (org-modern-footnote nil)
  (org-modern-property nil)
  (org-modern-block-name nil)
  (org-modern-star 'replace)
  (org-modern-replace-stars "◉○●○●○●")
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda))


;; Function to quickly capture fleeting notes from anywhere
(defun le/capture-fleeting-note ()
  "Quickly capture a fleeting note."
  (interactive)
  (org-roam-capture nil "f"))

;; Function to review fleeting notes
(defun le/review-fleeting-notes ()
  "Open a buffer with all unprocessed fleeting notes."
  (interactive)
  (org-agenda nil "f"))

;; Quick capture function for brag notes
(defun le/capture-brag-note ()
  "Quickly capture a brag-worthy achievement."
  (interactive)
  (org-roam-capture nil "b"))

;; Function to review fleeting notes
(defun le/review-brag-notes ()
  "Open a buffer with all unprocessed brag notes."
  (interactive)
  (org-agenda nil "b"))

;; Function to quickly capture ideas
(defun le/capture-idea-note ()
  "Quickly capture a idea note."
  (interactive)
  (org-roam-capture nil "!"))

;; Function to review fleeting notes
(defun le/review-idea-notes ()
  "Open a buffer with all unprocessed idea notes."
  (interactive)
  (org-agenda nil "!"))

;; org-roam base configuration
(use-package org-roam
  :ensure t
  :after org
  :custom
  (org-roam-directory (file-truename "~/git/org-roam"))
  (org-roam-db-location "~/git/org-roam/org-roam.db")
  (org-roam-database-connector 'sqlite-builtin)
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ("C-c n j" . org-roam-dailies-capture-today)
         ("C-c n q" . le/capture-fleeting-note)
         ("C-c n r" . le/review-fleeting-notes)
         ("C-c n b" . le/capture-brag-note)
         ("C-c n !" . le/capture-idea-note))
  :config
  ;; Ensure main directory exists
  (make-directory (file-truename org-roam-directory) t)

  ;; Set the display template without custom node-type method
  (setq org-roam-node-display-template
        (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

  (setq my-fleeting-notes-dir "~/git/org-roam/fleeting")
  (setq my-brag-notes-dir "~/git/org-roam/brag")
  (setq my-idea-notes-dir "~/git/org-roam/ideas")

  ;; Set up directories for different note types
  (make-directory "~/git/org-roam" t)
  (make-directory "~/git/org-roam/kb" t)
  (make-directory "~/git/org-roam/brag" t)
  (make-directory "~/git/org-roam/ideas" t)
  (make-directory my-fleeting-notes-dir t)

  ;; Configure capture templates for different types of notes
  (setq org-roam-capture-templates
        '(("k" "kb" plain
           "\n* %(replace-regexp-in-string \"-+\" \" \" \"${title}\")\n\n%?"
           :target (file+head "kb/${slug}.org"
                              "#+title: ${title}\n#+category: kb\n#+filetags: :kb:\n#+startup: inlineimages\n#+property: header-args :results verbatim raw\n\n")
           :immediate-finish t
           :unnarrowed t)
          ("f" "fleeting" plain
           "\n\n* %?\n\n  *Captured on %T*"
           :target (file+head "fleeting/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+category: fleeting\n#+filetags: :fleeting:\n#+created: %U\n#+deadline: %(org-insert-time-stamp (time-add (current-time) (days-to-time 2)))\n#+property: header-args :results verbatim raw\n\n")
           :unnarrowed t)
          ("b" "brag" plain
           "\n* Achievement Summary\n%?\n\n* Impact\n- Business Impact:\n- Technical Impact:\n- Team Impact:\n\n* Key Metrics\n- Quantitative:\n- Qualitative:\n\n* Context\n- Challenge Overcome:\n- Skills Demonstrated:\n\n* Supporting Details\n- Project Name:\n- Timeline:\n- Collaborators:\n\n* Follow-up Items\n- [ ] Add relevant metrics when available\n- [ ] Gather peer feedback\n- [ ] Update resume with achievement\n\n* Tags\n\n* Date Range\n- Started: %^{Started}t\n- Completed: %^{Completed}t\n"
           :target (file+head "brag/%<%Y%m%d%H%M%S>-${slug}.org"
                              "#+title: ${title}\n#+category: brag\n#+filetags: :brag:achievement:\n#+created: %U\n#+property: header-args :results verbatim raw\n\n")
           :unnarrowed t)
          ("!" "idea" plain
           "\n* %(replace-regexp-in-string \"-+\" \" \" \"${title}\")\n\n%?"
           :target (file+head "ideas/${slug}.org"
                              "#+title: ${title}\n#+category: idea\n#+filetags: :idea:\n#+startup: inlineimages\n#+property: header-args :results verbatim raw\n\n")
           :immediate-finish t
           :unnarrowed t)))

  (setq org-agenda-custom-commands
        '(("f" "Fleeting Notes Dashboard"
           ((tags "fleeting"
                  ((org-agenda-files (list my-fleeting-notes-dir))
                   (org-agenda-prefix-format '((tags . "FLEETING-NOTE ")))
                   (org-agenda-sorting-strategy '(timestamp-up))
                   (org-agenda-overriding-header "Fleeting Notes Dashboard\n")
                   ;; Extract and show the captured date from the content
                   (org-agenda-format-item
                    (lambda (cat tags priority txt &optional beg end)
                      (let* ((txt-copy txt)
                             (date-string
                              (if (string-match "\\*Captured on <\\([^>]+\\)>" txt-copy)
                                  (match-string 1 txt-copy)
                                "")))
                        (format "%s %s <%s>" cat txt date-string))))))))
          ("b" "Brag Notes Dashboard"
           ((tags "brag"
                  ((org-agenda-files (list my-brag-notes-dir))
                   (org-agenda-prefix-format '((tags . "BRAG-NOTE ")))
                   (org-agenda-sorting-strategy '(timestamp-up))
                   (org-agenda-overriding-header "Brag Notes Dashboard\n")
                   ;; Extract and show the captured date from the content
                   (org-agenda-format-item
                    (lambda (cat tags priority txt &optional beg end)
                      (let* ((txt-copy txt)
                             (date-string
                              (if (string-match "\\*Captured on <\\([^>]+\\)>" txt-copy)
                                  (match-string 1 txt-copy)
                                "")))
                        (format "%s %s <%s>" cat txt date-string))))))))
          ("!" "Idea Notes Dashboard"
           ((tags "idea"
                  ((org-agenda-files (list my-idea-notes-dir))
                   (org-agenda-prefix-format '((tags . "IDEA-NOTE ")))
                   (org-agenda-sorting-strategy '(timestamp-up))
                   (org-agenda-overriding-header "Idea Notes Dashboard\n")
                   ;; Extract and show the captured date from the content
                   (org-agenda-format-item
                    (lambda (cat tags priority txt &optional beg end)
                      (let* ((txt-copy txt)
                             (date-string
                              (if (string-match "\\*Captured on <\\([^>]+\\)>" txt-copy)
                                  (match-string 1 txt-copy)
                                "")))
                        (format "%s %s <%s>" cat txt date-string))))))))))

  (org-roam-db-autosync-mode))



(use-package org-roam-ql
  :ensure t
  :after (org-roam))

;; org-download configuration for images
(use-package org-download
  :ensure t
  :after org
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "~/git/org-roam/images")
  (org-download-heading-lvl nil)
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  :bind
  (:map org-mode-map
        (("C-c d s" . org-download-screenshot)
         ("C-c d d" . org-download-delete)))
  :config
  (make-directory "~/git/org-roam/images" t))

;; org-noter for PDF annotations
(use-package org-noter
  :ensure t
  :after org
  :custom
  (org-noter-notes-search-path '("~/git/org-roam"))
  (org-noter-default-notes-file-names '("notes.org"))
  (org-noter-separate-notes-from-heading t))

;; org-roam-ui configuration
(use-package org-roam-ui
  :ensure t
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start t))

;; PDF Tools (recommended for org-noter)
(use-package pdf-tools
  :ensure t
  :custom
  (pdf-view-display-size 'fit-page)
  :config
  (pdf-tools-install :no-query))

(use-package org-make-toc
  :ensure t
  :hook (org-mode . org-make-toc-mode))

(require 'ox-publish)

(require 'ox-md)

(use-package org-projectile
  :ensure t
  :after org
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :config
  (progn
    (setq org-projectile-projects-file
          (expand-file-name "~/git/projects-org/project.org"))
   (setq (or )rg-agenda-files (append org-agenda-files (org-projectile-todo-files)))
   (push (org-projectile-project-todo-entry) org-capture-templates)))

(use-package magit
  :ensure t
  :hook
  (after-save . magit-after-save-refresh-status)
  :init
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  :config
  (defun le/magit-display-buffer-pop-up-frame (buffer)
    (if (with-current-buffer buffer (eq major-mode 'magit-status-mode))
        (display-buffer buffer
                        '((display-buffer-reuse-window
                           display-buffer-below-selected)
                          (reusable-frames . t)))
      (magit-display-buffer-traditional buffer)))
)

;; UI
;; Configure doom-modeline
(use-package doom-modeline
  :ensure t
  :init (setq doom-modeline-support-imenu t)
  :after eshell
  :config (setq doom-modeline-icon t
                doom-modeline-major-mode-icon t
                doom-modeline-major-mode-color-icon t
                doom-modeline-buffer-state-icon t
                doom-modeline-buffer-modification-icon t
                doom-modeline-indent-info t
                doom-modeline-env-enable-python t
                doom-modeline-github t
                doom-modeline-github-interval (* 30 60)
                doom-modeline-modal t
                doom-modeline-modal-icon t
                doom-modeline-vcs-max-length 48
                doom-modeline-buffer-file-name-style 'truncate-with-project)
  :hook (after-init . doom-modeline-mode))

(use-package jinja2-mode
  :ensure t
  :mode (("\\.jinja2\\'" . jinja2-mode)
         ("\\.j2\\'" . jinja2-mode)
         ("\\.html.j2\\'" . jinja2-mode)
         ("\\.jinja\\'" . jinja2-mode)))

;; Configure doom-themes
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-material t)

  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  ;; (doom-themes-treemacs-config)
  ;; (doom-themes-treemacs-theme)
  (doom-themes-org-config))

;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :custom
  (setq vertico-cycle t)
  (vertico-count 20))

(use-package vertico-posframe
  :ensure t
  :after vertico
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8)))


  (setq le-bottom-center-width-7-posframe-config
      '(posframe
        (vertico-posframe-poshandler . posframe-poshandler-frame-bottom-center)
        (vertico-posframe-border-width . 7)
        (vertico-posframe-fallback-mode . vertico-buffer-mode)))

  (setq vertico-multiform-commands
      (append
       (mapcar (lambda (cmd) (cons cmd le-bottom-center-width-7-posframe-config))
               '(consult-line consult-buffer consult-ls-git consult-grep
                              consult-ripgrep consult-imenu consult-bookmark))
       '((consult-projectile
          posframe
          ;; (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
          (vertico-posframe-border-width . 7)
          (vertico-posframe-fallback-mode . vertico-buffer-mode))
         (t posframe)
         (execute-extended-command unobtrusive))))

  (setq vertico-multiform-categories
        '((file grid)))
  (vertico-multiform-mode 1))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure t
  :init
  (savehist-mode))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(partial-completion substring initials flex orderless basic))
  (orderless-component-separator "[ //]+"))

(use-package consult-lsp
  :ensure t)

(use-package consult
  :ensure t
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :bind
  ("M-y" . consult-yank-pop)
  ("C-x y" . consult-yasnippet)
  ("M-g M-g" . consult-goto-line)
  :bind-keymap
  ("C-x c" . consult-command-map)
  :init
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (defvar consult-command-map
    (let ((map (make-sparse-keymap)))
      (define-key map "b" #'consult-buffer)
      (define-key map "B" #'consult-bookmark)
      (define-key map "l" #'consult-line)
      (define-key map "i" #'consult-imenu)
      (define-key map "r" #'consult-ripgrep)
      (define-key map "f" #'consult-find)
      (define-key map "F" #'consult-focus-lines)
      (define-key map "G" #'consult-global-mark)
      (define-key map "y" #'consult-yasnippet)

      ;; nested keymap for 'p' prefix (projectile)
      (let ((projectile-map (make-sparse-keymap)))
        (define-key projectile-map "p" #'consult-projectile)
        (define-key projectile-map "f" #'consult-projectile-find-file)
        (define-key projectile-map "o" #'consult-projectile-find-file-other-window)
        (define-key projectile-map "r" #'consult-projectile-recentf)
        (define-key projectile-map "s" #'consult-projectile-switch-project)
        (define-key projectile-map "b" #'consult-projectile-switch-to-buffer)
        (define-key projectile-map "d" #'consult-projectile-find-dir)
        (define-key map "p" projectile-map))

      ;; nested keymap for 'g' prefix (git)
      (let ((git-map (make-sparse-keymap)))
        (define-key git-map "g" #'consult-git-grep)
        (define-key git-map "l" #'consult-ls-git)
        (define-key git-map "L" #'consult-ls-git-other-window)
        (define-key map "g" git-map))
      map))
  :config
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep)
  (setq
   consult-narrow-key "<")
  (setq consult-projectile-source-projectile-project-action #'dired))

(defun le/ensure-proper-buffer-after-tab-close ()
  "Ensure a proper buffer is selected after closing a tab."
  (when (and (eq this-command 'kill-buffer)
             (not (minibufferp)))
    (let ((non-minibuf-buffers
           (seq-filter (lambda (buf)
                         (not (string-match "\\*Minibuf-" (buffer-name buf))))
                       (buffer-list))))
      (when non-minibuf-buffers
        (switch-to-buffer (car non-minibuf-buffers))))))

(add-hook 'kill-buffer-hook 'le/ensure-proper-buffer-after-tab-close)

(defun le/centaur-tabs-buffer-groups ()
  "`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from
`emacs-lisp-mode' `dired-mode' `org-mode' `'magit-mode'.

All buffer name start with * will group to \"Emacs\".
Other buffer group by `centaur-tabs-get-group-name' with project name."
  (list
   (cond
    ((string-equal
      "*"
      (substring
       (buffer-name)
       0 1))
     "Emacs")
    ((memq
      major-mode
      '(magit-process-mode
        magit-status-mode
        magit-diff-mode
        magit-log-mode
        magit-file-mode
        magit-blob-mode
        magit-blame-mode
        tags-table-mode
        ))
     "Magit")
    ((derived-mode-p 'prog-mode)
     "Development")
    ((derived-mode-p 'dired-mode)
     "Dired")
    ((memq major-mode '(helpful-mode
                        help-mode))
     "Help")
    ((memq major-mode '(org-mode
                        org-agenda-clockreport-mode
                        org-src-mode
                        org-agenda-mode
                        org-beamer-mode
                        org-indent-mode
                        org-bullets-mode
                        org-cdlatex-mode
                        org-agenda-log-mode
                        diary-mode))
     "OrgMode")
    (t
     (centaur-tabs-get-group-name (current-buffer))))))

(defun le/debug-centaur-tab-icon (tab)
  "Print debug info about the icon for the given tab."
  (interactive)
  (with-current-buffer (car tab)
    (let* ((file-name (buffer-file-name))
           (icon (cond (file-name
                        (centaur-tabs--icon-for-file (file-name-nondirectory file-name)))
                       (t
                        (centaur-tabs--icon-for-mode major-mode)))))
      (message "Icon: %s, Face: %s, File: %s, Mode: %s"
               icon
               (get-text-property 0 'face icon)
               (or file-name "nil")
               major-mode))))

(defun le/debug-current-tab-icon ()
  "Print debug info about the icon for the current buffer's tab."
  (interactive)
  (let ((current-tab (list (current-buffer))))
    (le/debug-centaur-tab-icon current-tab)))

(defun le/debug-all-tab-icons ()
  "Print debug info about all tabs' icons."
  (interactive)
  (with-output-to-temp-buffer "*Tab Icons Debug*"
    (dolist (buff (buffer-list))
      (with-current-buffer buff
        (let* ((file-name (buffer-file-name))
               (icon (cond (file-name
                            (ignore-errors
                             (centaur-tabs--icon-for-file (file-name-nondirectory file-name))))
                           (t
                            (ignore-errors
                             (centaur-tabs--icon-for-mode major-mode)))))
               (face (when icon (get-text-property 0 'face icon))))
          (princ (format "Buffer: %s\nFile: %s\nMode: %s\nIcon: %s\nFace: %s\n\n"
                         (buffer-name)
                         (or file-name "nil")
                         major-mode
                         icon
                         face)))))))

(use-package centaur-tabs
  :after (dashboard org)
  :ensure t
  :demand
  :init
  (setq centaur-tabs-height 30
        x-underline-at-descent-line t)
  :hook
  ((calendar-mode . centaur-tabs-local-mode)
   (org-agenda-mode . centaur-tabs-local-mode)
   (imenu-list-major-mode . centaur-tabs-local-mode)
   (messages-buffer-mode . centaur-tabs-local-mode)
   (fundamental-mode . centaur-tabs-local-mode))
  :bind
  (("s-t" . centaur-tabs--create-new-tab)
   ("s-}" . centaur-tabs-forward)
   ("s-{" . centaur-tabs-backward))
  :custom
  (centaur-tabs-set-icons t)
  (centaur-tabs-plain-icons nil)
  (centaur-tabs-icon-type 'nerd-icons)
  (centaur-tabs-set-close-button nil)
  (centaur-tabs-set-modified-marker t)
  (centaur-tabs-set-bar 'under)
  :config
  (centaur-tabs-mode 1)
  (centaur-tabs-group-by-projectile-project)

  (defun le/fix-icons-without-inherit (orig-fun &rest args)
    "Add white color only to icons that don't have an :inherit property."
    (let ((icon (apply orig-fun args)))
      (when (and (stringp icon) (> (length icon) 0))
        (let ((face (get-text-property 0 'face icon)))
          (when (and (listp face)
                     (plist-get face :family)
                     (not (plist-get face :inherit))  ; Only fix icons without :inherit
                     (not (plist-get face :foreground)))  ; And without :foreground
            (let ((new-face (plist-put (copy-sequence face) :foreground "white")))
              (put-text-property 0 (length icon) 'face new-face icon)))))
      icon))

  (advice-add 'centaur-tabs--icon-for-file :around #'le/fix-icons-without-inherit)
  (advice-add 'centaur-tabs--icon-for-mode :around #'le/fix-icons-without-inherit)
  (set-face-attribute 'centaur-tabs-unselected nil :foreground "gray40")
)

(use-package marginalia
  :ensure t
  :init
  (marginalia-mode)
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle)))

(use-package company
  :ensure t
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)
  (setq company-global-modes '(not text-mode fundamental-mode))
  (add-to-list 'company-backends 'company-ansible)
  )

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode)
  :config (setq company-box-doc-enable t))

(use-package company-quickhelp
  :ensure t
  :hook (company-mode . company-quickhelp-mode))

;; (require 'tree-sitter)
;; (require 'tree-sitter-langs)

(use-package corfu
  :ensure t
  :config
  (add-to-list 'corfu-margin-formatters 'nerd-icons-corfu-formatter))

(defun le/corfu-lsp-setup ()
  (corfu-mode)
  (setq-local completion-styles '(orderless)
              completion-category-defaults nil))

(use-package lsp-mode
  :ensure t
  :hook ((terraform-mode . lsp-deferred)
         le/corfu-lsp-setup)
  :config (setq lsp-enable-links t
                read-process-output-max (* 2048 2048)
                lsp-use-plists t
                lsp-log-io nil
                lsp-semantic-tokens-enable t
                lsp-semantic-tokens-honor-refresh-requests t
                lsp-disabled-clients '(tfls)
                lsp-terraform-ls-enable-show-reference t
                lsp-terraform-ls-prefill-required-fields t
                lsp-enable-links t
                lsp-semantic-tokens-enable t
                lsp-semantic-tokens-honor-refresh-requests t
                lsp-ansible-add-on t
                lsp-enable-symbol-highlighting t
                lsp-groovy-server-file (concat (getenv "HOME") "/.emacs.d/.cache/lsp/groovy-language-server-all.jar")
                lsp-groovy-classpath (concat (getenv "HOME") "/groovy-language-server/build/libs"))
  :commands (lsp lsp-deferred))

(use-package lsp-ui
  :commands lsp-ui-mode
  :ensure t
  :config (setq lsp-ui-sideline-show-diagnostics nil
                lsp-ui-sideline-show-hover nil
                lsp-ui-sideline-show-code-actions t
                lsp-ui-sideline-update-mode 'line
                lsp-ui-peek-enable t
                lsp-ui-peek-show-directory t
                lsp-ui-doc-enable t
                lsp-ui-doc-delay 0
                lsp-ui-doc-show-with-cursor nil
                lsp-ui-doc-show-with-mouse t
                lsp-ui-doc-position 'top))

(use-package lsp-treemacs
  :ensure t
  :custom
  (lsp-treemacs-theme "Default")
  :config (lsp-treemacs-sync-mode 1)
  :commands lsp-treemacs-errors-list)

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))

(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  ;; Format: "(icon title help action face prefix suffix)"
  (setq dashboard-navigator-buttons
        `(
          ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
            "Homepage"
            "Browse homepage"
            (lambda (&rest _) (browse-url "https://github.com/lewars"))))
          ))
  :custom
  (dashboard-startup-banner 'logo)
  (dashboard-icon-type 'nerd-icons)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-set-footer t)
  (dashboard-projects-backend 'project-el)
  (dashboard-display-icons-p t)
  (dashboard-recentf-show-base t)
  (dashboard-projects-show-base t)
  (dashboard-bookmarks-show-base t)
  (dashboard-items '(
                     (recents . 10)
                     (projects  . 15)
                     (bookmarks . 10)
                     (agenda    . 20)
                     (registers . 10)
                     ))
  (dashboard-item-shortcuts '(
                              (recents   . "r")
                              (projects  . "p")
                              (bookmarks . "m")
                              (agenda    . "a")
                              (registers . "e"))
                            )
  (dashboard-startupify-list '(
                               dashboard-insert-banner
                               dashboard-insert-newline
                               dashboard-insert-banner-title
                               dashboard-insert-newline
                               dashboard-insert-navigator
                               dashboard-insert-newline
                               dashboard-insert-init-info
                               dashboard-insert-items
                               dashboard-insert-newline
                               dashboard-insert-footer
                               ))
  (dashboard-item-names '(
                          ("Agenda for today:"           . "Today's agenda:")
                          ("Agenda for the coming week:" . "Agenda:")
                          ))

  )

(use-package which-key
  :ensure t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 3))

(defun le/emojify-setup ()
  "Setup emojify on hook execution."
  (global-emojify-mode -1))
;; (company-emoji-init))

(use-package emojify
  :ensure t
  :hook (after-init . le/emojify-setup)
  :config (setq emojify-display-style 'unicode))

(defun le/enable-company-emoji ()
  "Add company-emoji backend to company-backends."
  (interactive)
  (unless (member 'company-emoji company-backends)
    (setq company-backends (push 'company-emoji company-backends))
    (message "company-emoji backend enabled.")))

(defun le/disable-company-emoji ()
  "Remove company-emoji backend from company-backends."
  (interactive)
  (when (member 'company-emoji company-backends)
    (setq company-backends (remove 'company-emoji company-backends))
    (message "company-emoji backend disabled.")))

(use-package company-emoji
  :ensure t)

(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))

;; (use-package bats-mode
;;   :ensure t)

(use-package dockerfile-mode
  :ensure t
  :defer 2
  :mode
  ("Dockerfile\\'" . dockerfile-mode))

(use-package eterm-256color
  :ensure t)

(use-package vterm
  :ensure t
  :bind ("C-c t" . vterm)
  :hook
  (vterm-mode . (lambda ()
                  (eterm-256color-mode)
                  (let ((liberation-mono '(:family "Liberation Mono" :height 90)))
                    (set (make-local-variable 'buffer-face-mode-face) liberation-mono)
                    (buffer-face-mode t))))
  :config
  ;; Create keybinding to allow keys to be sent to the terminal
  (define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key)

  ;; Define the custom font face for vterm
  (defvar vterm-custom-face '(:family "Liberation Mono" :height 90))

  ;; Apply font to vterm-copy-mode
  (defun vterm-apply-custom-font ()
    "Apply custom font to current vterm buffer."
    (set (make-local-variable 'buffer-face-mode-face) vterm-custom-face)
    (buffer-face-mode t))

  ;; Hook to ensure font persists in copy mode
  (add-hook 'vterm-copy-mode-hook 'vterm-apply-custom-font)

  ;; Intercept C-k in vterm to add text to kill ring
  (defun vterm-kill-line-and-add-to-kill-ring ()
    "Kill line in vterm and add the text to Emacs kill ring."
    (interactive)
    (let ((inhibit-read-only t)
          (pos (point))
          (text ""))
      ;; Save the text that will be killed
      (save-excursion
        (end-of-line)
        (when (> (point) pos)
          (setq text (buffer-substring-no-properties pos (point)))))

      ;; Add to kill ring if we have text
      (when (and text (not (string= text "")))
        (kill-new text))

      ;; Now perform the normal vterm C-k action
      (vterm-send-key "k" nil nil t)))

  ;; Override C-k with our new function
  (define-key vterm-mode-map (kbd "C-k") 'vterm-kill-line-and-add-to-kill-ring)

  ;; Make C-y insert from kill ring
  (defun vterm-yank-from-kill-ring ()
    "Insert text from the kill ring into vterm."
    (interactive)
    (when kill-ring
      (vterm-send-string (car kill-ring))))

  ;; Bind C-y to our yank function
  (define-key vterm-mode-map (kbd "C-y") 'vterm-yank-from-kill-ring)

  ;; Visual indicator for vterm-copy-mode
  ;; TODO: Make it more pretty
  (defun vterm-copy-mode-indicator ()
    "Change modeline color and add indicator when in vterm-copy-mode."
    (if vterm-copy-mode
        (progn
          ;; Change modeline background color
          (set (make-local-variable 'face-remapping-alist)
               '((mode-line . (:background "dark red" :foreground "white"))))
          ;; Add "[COPY]" to the mode line
          (setq mode-line-format
                (append mode-line-format '(" " (:propertize "[COPY]" face (:weight bold))))))
      ;; Reset when leaving copy mode
      (kill-local-variable 'face-remapping-alist)
      (setq mode-line-format (default-value 'mode-line-format))))

  ;; Add our indicator function to copy mode hooks
  (add-hook 'vterm-copy-mode-hook 'vterm-copy-mode-indicator)

  :custom
  (vterm-copy-exclude-prompt t)
  (vterm-use-vterm-prompt-detection-method t)
  (term-prompt-regexp "^❯ ")
  (vterm-kill-buffer-on-exit t)
  (vterm-max-scrollback 10000))

(use-package k8s-mode
  :ensure t
  :defer t
  :commands (k8s-mode))

(use-package gptel
 :ensure t
 :bind (([(super return)] . gptel-send)
        ("C-x l" . gptel-menu)
        ("C-x L p" . gptel-org-set-properties)
        ("C-x L t" . gptel-org-set-topic)
        ("C-x L a" . gptel-add)
        ("C-x L f" . gptel-add-file)
        ("C-x L r" . gptel-rewrite))
 :config
 (setq-local show-trailing-whitespace nil)
 (setq gptel-track-response nil
       gptel-log-level 'info
       gptel-model 'deepseek-r1:70b
       gptel-backend (gptel-make-ollama "Ollama"
                       :host "localhost:11434"
                       :stream t
                       :models '("deepseek-r1:70b"
                                 "codegemma:7b-instruct-fp16"
                                 "codegemma:latest"
                                 "deepseek-coder-v2:16b-lite-instruct-fp16"
                                 "deepseek-coder:33b-base-q8_0"
                                 "dolphin-mixtral:8x22b"
                                 "llama3.2-vision:90b"
                                 "llama3.3:latest"
                                 "qwen2.5-coder:32b"
                                 "qwen2.5:72b")))

 (add-to-list 'gptel-directives
              `(Ai-Expert . ,(concat
                              "You are an AI research expert specializing in:\n"
                              "1. Large Language Models - including architecture, training, and deployment\n"
                              "2. Stable Diffusion and text-to-image systems - including models, samplers, and parameters\n"
                              "3. AI video generation - covering text-to-video, video-to-video, and frame interpolation\n\n"
                              "Provide technical, accurate responses focused on current techniques and best practices.\n"
                              "When discussing implementations, reference specific models, frameworks, and tools.\n"
                              "If you're uncertain about any detail, acknowledge the limitation rather than speculate.\n"
                              "Include relevant parameter settings and technical constraints when explaining processes.")))

(add-to-list 'gptel-directives
             `(Linux-Admin . ,(concat
                               "You are a Fedora Linux Server 40 expert. Write concise command examples "
                               "with essential flags and proper error handling. Include verification steps "
                               "for critical operations. Focus on security and stability. If asked for help, "
                               "provide a concise and simple solution with a brief explanation after.\n"
                               "If uncertain about anything, just say so.")))

(add-to-list 'gptel-directives
             `(Python-Coder . ,(concat
                                "You're a Python software engineer.\n"
                                "Generate Python code only, no explanations. Follow these rules when writing code:\n\n"
                                "1. Use type hints\n"
                                "2. Handle errors with specific try/except blocks\n"
                                "3. Write clear docstrings as described in the Google Python Style Guide\n"
                                "4. Keep functions small and single-purpose\n"
                                "5. Use comments only for complex logic\n"
                                "6. Follow SOLID principles, especially single responsibility and dependency inversion")))

(add-to-list 'gptel-directives
             `(Bash-Coder . ,(concat
                              "You are a Bash shell programming expert. Write code only, no explanation. Follow these rules when writing code:\n"
                              "1. Always include proper error handling with 'set -euo pipefail' and quote all variables\n"
                              "2. Write clear code with meaningful variable/function names, only comment complex logic\n"
                              "3. Prioritize built-in commands over external tools when possible\n"
                              "4. Consider security implications and validate all inputs\n"
                              "5. Optimize for both performance and maintainability\n"
                              "6. Ensure proper file permissions and handle cleanup appropriately\n")))

 (add-to-list 'gptel-directives
              `(Ansible-Coder . ,(concat
                               "You are an Ansible automation expert. Write code only, no explanation. Follw these rules when writing code:\n"
                               "1. Always use YAML syntax correctly with proper indentation and format\n"
                               "2. Write clear task names and use meaningful variable names\n"
                               "3. Follow idempotency principles - tasks should be repeatable without side effects\n"
                               "4. Use built-in Ansible modules over shell/command modules when possible\n"
                               "5. Include proper error handling and validate all inputs\n"
                               "6. Follow least privilege principle and use proper permissions\n"
                               "7. Use loops and conditionals effectively to avoid task repetition\n")))

(add-to-list 'gptel-directives
            `(OCI-Container-Coder . ,(concat
                             "You are an OCI container engineer. Write code only, no explanation. Follow these rules when writing code:\n"
                             "1. Follow multi-stage build patterns to minimize final image size\n"
                             "2. Use specific base image tags, never 'latest'\n"
                             "3. Group RUN commands with && to reduce layers\n"
                             "4. Place frequently changing files and commands later in the Dockerfile\n"
                             "5. Include proper health checks and set appropriate user permissions\n"
                             "6. Remove unnecessary files and cleanup package manager caches\n")))

(add-to-list 'gptel-directives
            `(Golang-Coder . ,(concat
                             "You are a Golang expert engineer. Write code only, no explanation. Follow these rules when writing code:\n"
                             "2. Use proper error handling with meaningful error messages\n"
                             "3. Implement interfaces only where needed and keep them small\n"
                             "4. Write concurrent code safely using proper synchronization\n"
                             "5. Follow standard naming conventions (CamelCase for exported)\n"
                             "6. Use the standard library over external packages when possible\n"
                             "7. Implement appropriate logging and tracing mechanisms\n"
                             "8. Use context for cancellation and timeout handling\n"
                             "9. Structure code for dependency injection when applicable\n"
                             "10. Follow SOLID principles, especially single responsibility and dependency inversion")))

(add-to-list 'gptel-directives
            `(Javascript-Coder . ,(concat
                             "You are a JavaScript expert engineer. Write code only, no explanation. Follow these rules when writing code:\n"
                             "1. Use modern ES6+ features and syntax appropriately\n"
                             "2. Implement proper async/await patterns for asynchronous code\n"
                             "3. Use appropriate error handling with try/catch blocks\n"
                             "4. Follow proper closure and scope management\n"
                             "5. Implement proper type checking and validation\n"
                             "6. Use appropriate design patterns when applicable\n"
                             "7. Follow SOLID principles, especially single responsibility and dependency inversion\n"
                             "8. Optimize for performance and browser compatibility\n")))

(add-to-list 'gptel-directives
            `(Java-Coder . ,(concat
                             "You are a Java expert engineer. Write code only, no explanation. Follow these rules when writing code:\n"
                             "1. Follow clean code principles and SOLID design patterns\n"
                             "2. Use proper exception handling with meaningful messages\n"
                             "3. Implement appropriate logging mechanisms\n"
                             "4. Use streams and lambdas for functional programming\n"
                             "5. Follow proper memory management and resource cleanup\n"
                             "6. Implement thread-safe code when needed\n"
                             "7. Use appropriate collections and data structures\n"
                             "8. Follow standard naming conventions (camelCase, PascalCase)\n"
                             "9. Use dependency injection when appropriate\n"
                             "10. Write testable code with proper unit tests\n")))

(add-to-list 'gptel-directives
            `(Cpp-Coder . ,(concat
                             "You are a C++ expert engineer. Produce code only, no explanation. When writing C++ code:\n"
                             "1. Use modern C++ features (C++17/20) when appropriate\n"
                             "2. Follow RAII principles and smart pointers for resource management\n"
                             "3. Implement proper error handling with exceptions or error codes\n"
                             "4. Use const correctness and appropriate access specifiers\n"
                             "5. Write thread-safe code with proper synchronization\n"
                             "6. Optimize for performance while maintaining readability\n"
                             "7. Use STL containers and algorithms when applicable\n"
                             "8. Implement proper memory management to prevent leaks\n"
                             "9. Follow consistent naming conventions and formatting\n"
                             "10. Use forward declarations to minimize compilation dependencies\n")))

;;;; gptel tool functions
;;;; ====================

;; Create a file
(gptel-make-tool
 :function (lambda (rel-path script-content)
             "Create a file at a given path relative to the home directory,
   creating any necessary directories.  If the file already exists,
   signal an error."
             (let* ((full-path (expand-file-name rel-path (expand-file-name "~")))
                    (dir-path (file-name-directory full-path)))
               (when (file-exists-p full-path)
                 (error "File already exists: %s" full-path))
               (condition-case err
                   (progn
                     (when dir-path
                       (make-directory dir-path t))
                     (write-region script-content nil full-path)
                     full-path)  ; Return the created file path
                 (error (error "Failed to create file: %s (%s)"
                               full-path (error-message-string err))))))

 :name "create_file"
 :description "Create a file with text"
 :args (list '(:name "rel-path"
                     :type string
                     :description "file path relative to home directory")
             '(:name "script-content"
                     :type string
                     :description "file text data")))

;; Create a directory
(gptel-make-tool
 :function (lambda (rel-path)
  "Create directories specified by a relative path, relative to the
   home directory. Creates parent directories as needed.  Errors if
   any part of the path already exists as a file."
  (let ((full-path (expand-file-name rel-path (expand-file-name "~"))))
    (when (file-exists-p full-path)
      (error "ERROR: Path already exists (as a file): %s" full-path))
    (unless (file-directory-p full-path)
      (condition-case err
          (progn
            (make-directory full-path t)
            (message "Created directory: %s" full-path)
            full-path)  ; Return the created path
        (error (error "ERROR: Failed to create directory: %s (%s)"
                     full-path (error-message-string err)))))))
 :name "create_directory"
 :description "Create a directory"
 :args (list '(:name "rel-path"
                     :type string
                     :description "directory path relative to home directory")))

;; List files
(gptel-make-tool
 :function (lambda (dir-path)
             "List files recursively in a directory, appending / to empty directories."
             (let* ((full-dir-path (expand-file-name dir-path (expand-file-name "~")))
                    (all-paths (directory-files-recursively full-dir-path ".*" t nil t)))
               (unless (file-directory-p full-dir-path)
                 (error "Invalid directory path: %s" full-dir-path))
               (mapcar (lambda (path)
                         (if (and (file-directory-p path)
                                  (equal (directory-files path nil "^[^.]" t) nil))
                             (concat path "/")
                           path))
                       all-paths)))
 :name "list_files"
 :description "List files in a directory"
 :args (list '(:name "dir-path"
                     :type string
                     :description "directory path relative to home directory")))

)

(use-package multi-vterm
  :ensure t
  :bind ("C-c T" . multi-vterm)
  )

(use-package atomic-chrome
  :ensure t
  :config
  (atomic-chrome-start-server)
  (setq atomic-chrome-url-major-mode-alist
        '(("github\\.com" . gfm-mode)
          ("redmine" . textile-mode)
          ("gitlab" . textile-mode)
          ("jira" . textile-mode)
          ("confluence" . textile-mode)
          ("wiki" . textile-mode)
          ("localhost" . textile-mode)))
  (setq atomic-chrome-buffer-open-style 'full))

;; (use-package lorem-ipsum
;;   :ensure t)

(use-package flyspell-correct
  :ensure t
  :after flyspell
  :bind
  (:map flyspell-mode-map
        ("C-;" . flyspell-correct-wrapper)))

(use-package latex-preview-pane
  :ensure t
  :hook (latex-mode . latex-preview-pane-mode))

(use-package consult-gh
  :ensure t
  :after consult
  :init
  (require 'consult-gh)
  :custom
  (consult-gh-default-clone-directory "~/git/")
  (consult-gh-show-preview t)
  (consult-gh-repo-action #'consult-gh--repo-browse-files-action)
  (consult-gh-issue-action #'consult-gh--issue-view-action)
  (consult-gh-pr-action #'consult-gh--pr-view-action)
  (consult-gh-code-action #'consult-gh--code-view-action)
  (consult-gh-file-action #'consult-gh--files-view-action)
  (consult-gh-notifications-action #'consult-gh--notifications-action)
  (consult-gh-dashboard-action #'consult-gh--dashboard-action)
  (consult-gh-large-file-warning-threshold 2500000)
  (consult-gh-prioritize-local-folder 'suggest)
  :config
  ;; (setq consult-gh-default-orgs-list (consult-gh--get-current-orgs t))

  ;; Set default org when switching accounts
  (add-hook 'consult-gh-auth-post-switch-hook
            (lambda (&rest args)
              (setq consult-gh-default-orgs-list
                    (consult-gh--get-current-orgs t))))

  ;; Remember visited orgs/repos across sessions
  (add-to-list 'savehist-additional-variables 'consult-gh--known-orgs-list)
  (add-to-list 'savehist-additional-variables 'consult-gh--known-repos-list))


(use-package consult-gh-forge                 ;;
  :ensure t                                   ;;
  :after consult-gh                           ;;
  :config                                     ;;
  (consult-gh-forge-mode +1)                  ;;
  (setq consult-gh-forge-timeout-seconds 20)) ;;


(use-package consult-ls-git
  :ensure t)

(use-package consult-org-roam
   :ensure t
   :after org-roam
   :bind-keymap
   ("C-x c" . consult-command-map)
   :init
   (require 'consult-org-roam)
   (consult-org-roam-mode 1)
      (defvar consult-command-map
     (let ((map (make-sparse-keymap)))
       ;; nested keymap for 'n' prefix (projectile)
       (let ((projectile-map (make-sparse-keymap)))
         (define-key projectile-map "f" #'consult-org-roam-file-find)
         (define-key projectile-map "b" #'consult-org-roam-backlinks)
         (define-key projectile-map "B" #'consult-org-roam-backlinks-recursive)
         (define-key projectile-map "l" #'consult-org-roam-forward-links)
         (define-key projectile-map "r" #'consult-org-roam-search)
         (define-key map "n" projectile-map))
       map))
   :custom
   (consult-org-roam-grep-func #'consult-ripgrep)
   (consult-org-roam-buffer-narrow-key ?r)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key "M-."))


;; (use-package tree-sitter
;;   ;; :ensure t
;;   :config
;;   (add-hook 'json-mode-hook #'tree-sitter-mode)
;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

;; (use-package tree-sitter-langs
;;   :ensure t
;;   :after tree-sitter)

(use-package google-this
  :ensure t
  :init
  (setq google-this-keybind (kbd "C-x G"))
  ;; :bind-keymap
  ;; ("C-x G" . google-this-mode-submap)
  :config
  (google-this-mode 1)
  (defadvice google-this (around region-search activate)
    "If region is active and RET is pressed, use it for search"
    (if (and (region-active-p) (eq (car-safe last-command-event) 'return))
        (google-this-region nil)
      ad-do-it))
  (setq google-this-keybind (kbd "C-x G"))
  (global-set-key google-this-keybind 'google-this))

(use-package page-break-lines
  :ensure t)

(use-package textile-mode
  :ensure t
  :mode ("\\.textile\\'" . textile-mode))

(use-package anki-editor
  :ensure t
  :after org
  :bind (:map org-mode-map
              (("C-c n a" . anki-editor-push-notes))))

;; create a mermaid-mode use package config
;; TODO: fix docker command selinux lablel issue
(use-package mermaid-mode
  :ensure t
  :defer t
  :mode ("\\.mmd\\'" . mermaid-mode)
  :config
  ;; (setq mermaid-output-format "md")
  (setq my-uid (user-uid))
  (setq mermaid-mmdc-location "podman")
  (setq mermaid-flags (format "run --userns keep-id --user %d --rm -v /tmp:/tmp:z ghcr.io/mermaid-js/mermaid-cli/mermaid-cli:11.4.2" my-uid)))

(use-package diff-hl
  :ensure t
  :hook ((prog-mode . diff-hl-mode)
         (dired-mode . diff-hl-dired-mode)))


;; (use-package symbol-overlay
;;   :ensure t
;;   :hook (prog-mode . symbol-overlay-mode))

(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

;; use demap and configure it
(use-package demap
  :ensure t
  :diminish
  :after doom-modeline


  :bind (("C-c m". demap-toggle))
  :config
  (setq demap-minimap-window-side 'right)
  (setq demap-minimap-window-width 15)
  ;; (face-spec-set 'demap-minimap-font-face
  ;;                `((t :background ,gray2
  ;;                     :inherit    unspecified
  ;;                     :family     "minimap"
  ;;                     :height     10          )))
  (face-spec-set 'demap-visible-region-face
                 `((t :background ,"#2a404b"
                      :inherit    unspecified )))
  (face-spec-set 'demap-visible-region-inactive-face
                 `((t :background ,"#080808"
                      :inherit    unspecified )))
  (face-spec-set 'demap-current-line-face
                 `((t :background ,"#5a5400"
                      :inherit    unspecified )))
  (face-spec-set 'demap-current-line-inactive-face
                 `((t :background ,"#030303"
                      :inherit    unspecified ))))

(use-package systemd
  :ensure t)

(put 'narrow-to-region 'disabled nil)
(provide 'emacs)
;;; emacs ends here
